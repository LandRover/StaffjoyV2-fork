// Code generated by protoc-gen-gogo.
// source: sms.proto
// DO NOT EDIT!

/*
Package sms is a generated protocol buffer package.

It is generated from these files:
	sms.proto

It has these top-level messages:
	SmsRequest
*/
package sms

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SmsRequest struct {
	To   string `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *SmsRequest) Reset()                    { *m = SmsRequest{} }
func (m *SmsRequest) String() string            { return proto.CompactTextString(m) }
func (*SmsRequest) ProtoMessage()               {}
func (*SmsRequest) Descriptor() ([]byte, []int) { return fileDescriptorSms, []int{0} }

func init() {
	proto.RegisterType((*SmsRequest)(nil), "staffjoy.sms.SmsRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SmsService service

type SmsServiceClient interface {
	QueueSend(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type smsServiceClient struct {
	cc *grpc.ClientConn
}

func NewSmsServiceClient(cc *grpc.ClientConn) SmsServiceClient {
	return &smsServiceClient{cc}
}

func (c *smsServiceClient) QueueSend(ctx context.Context, in *SmsRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/staffjoy.sms.SmsService/QueueSend", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SmsService service

type SmsServiceServer interface {
	QueueSend(context.Context, *SmsRequest) (*google_protobuf.Empty, error)
}

func RegisterSmsServiceServer(s *grpc.Server, srv SmsServiceServer) {
	s.RegisterService(&_SmsService_serviceDesc, srv)
}

func _SmsService_QueueSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmsServiceServer).QueueSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.sms.SmsService/QueueSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmsServiceServer).QueueSend(ctx, req.(*SmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "staffjoy.sms.SmsService",
	HandlerType: (*SmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueSend",
			Handler:    _SmsService_QueueSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sms.proto",
}

func init() { proto.RegisterFile("sms.proto", fileDescriptorSms) }

var fileDescriptorSms = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x8e, 0x41, 0xcb, 0x82, 0x40,
	0x10, 0x86, 0x3f, 0xe5, 0x23, 0x70, 0x89, 0x0e, 0x0b, 0x95, 0xd8, 0x25, 0x3c, 0x75, 0x1a, 0xa3,
	0x7e, 0x40, 0x10, 0x74, 0xec, 0x90, 0xde, 0xba, 0xa5, 0x8e, 0x52, 0xb4, 0x8d, 0x39, 0xb3, 0x81,
	0xff, 0x3e, 0x5a, 0x09, 0xbb, 0x0d, 0x33, 0xef, 0x33, 0xef, 0xa3, 0x02, 0x36, 0x0c, 0x4d, 0x4b,
	0x42, 0x7a, 0xcc, 0x72, 0xa9, 0xaa, 0x1b, 0x75, 0xc0, 0x86, 0xa3, 0x45, 0x4d, 0x54, 0xdf, 0x31,
	0x71, 0xb7, 0xdc, 0x56, 0x09, 0x9a, 0x46, 0xba, 0x3e, 0x1a, 0xaf, 0x95, 0xca, 0x0c, 0xa7, 0xf8,
	0xb4, 0xc8, 0xa2, 0x27, 0xca, 0x17, 0x0a, 0xbd, 0xa5, 0xb7, 0x0a, 0x52, 0x5f, 0x48, 0x6b, 0xf5,
	0x9f, 0x53, 0xd9, 0x85, 0xbe, 0xdb, 0xb8, 0x79, 0x73, 0x74, 0x44, 0x86, 0xed, 0xeb, 0x5a, 0xa0,
	0xde, 0xa9, 0xe0, 0x64, 0xd1, 0x62, 0x86, 0x8f, 0x52, 0x87, 0xf0, 0x5b, 0x0c, 0xc3, 0xe3, 0x68,
	0x06, 0xbd, 0x04, 0x7c, 0x25, 0xe0, 0xf0, 0x91, 0x88, 0xff, 0xf6, 0xf3, 0xf3, 0xb4, 0xa0, 0x12,
	0x07, 0xb2, 0x20, 0x93, 0xb0, 0xe1, 0x7c, 0xe4, 0xa2, 0xdb, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc9, 0x46, 0x99, 0x49, 0xd8, 0x00, 0x00, 0x00,
}
