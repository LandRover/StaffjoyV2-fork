// Code generated by protoc-gen-go.
// source: company.proto
// DO NOT EDIT!

/*
Package company is a generated protocol buffer package.

It is generated from these files:
	company.proto

It has these top-level messages:
	Company
	CompanyList
	CompanyListRequest
	CreateCompanyRequest
	GetCompanyRequest
	Team
	TeamList
	TeamListRequest
	CreateTeamRequest
	GetTeamRequest
	Job
	JobList
	JobListRequest
	CreateJobRequest
	GetJobRequest
	Shift
	ShiftList
	ShiftListRequest
	WorkerShiftListRequest
	BulkPublishShiftsRequest
	CreateShiftRequest
	GetShiftRequest
	DirectoryEntry
	NewDirectoryEntry
	DirectoryEntryRequest
	DirectoryList
	DirectoryListRequest
	AdminListRequest
	Admins
	AdminOfRequest
	AdminOfList
	WorkerListRequest
	Workers
	Worker
	WorkerOfRequest
	WorkerOfList
	Association
	AssociationList
	TimeZoneList
	TimeZoneListRequest
	ScheduledPerWeek
	GrowthGraphResponse
	GrowthGraphRequest
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Company struct {
	Uuid                 string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Name                 string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Archived             bool   `protobuf:"varint,3,opt,name=archived" json:"archived,omitempty"`
	DefaultTimezone      string `protobuf:"bytes,4,opt,name=default_timezone,json=defaultTimezone" json:"default_timezone,omitempty"`
	DefaultDayWeekStarts string `protobuf:"bytes,5,opt,name=default_day_week_starts,json=defaultDayWeekStarts" json:"default_day_week_starts,omitempty"`
}

func (m *Company) Reset()                    { *m = Company{} }
func (m *Company) String() string            { return proto.CompactTextString(m) }
func (*Company) ProtoMessage()               {}
func (*Company) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Company) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Company) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Company) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Company) GetDefaultTimezone() string {
	if m != nil {
		return m.DefaultTimezone
	}
	return ""
}

func (m *Company) GetDefaultDayWeekStarts() string {
	if m != nil {
		return m.DefaultDayWeekStarts
	}
	return ""
}

type CompanyList struct {
	Companies []*Company `protobuf:"bytes,1,rep,name=companies" json:"companies,omitempty"`
	Limit     int32      `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset    int32      `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *CompanyList) Reset()                    { *m = CompanyList{} }
func (m *CompanyList) String() string            { return proto.CompactTextString(m) }
func (*CompanyList) ProtoMessage()               {}
func (*CompanyList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CompanyList) GetCompanies() []*Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

func (m *CompanyList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *CompanyList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type CompanyListRequest struct {
	Offset int32 `protobuf:"varint,1,opt,name=offset" json:"offset,omitempty"`
	Limit  int32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *CompanyListRequest) Reset()                    { *m = CompanyListRequest{} }
func (m *CompanyListRequest) String() string            { return proto.CompactTextString(m) }
func (*CompanyListRequest) ProtoMessage()               {}
func (*CompanyListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CompanyListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *CompanyListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type CreateCompanyRequest struct {
	Name                 string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DefaultTimezone      string `protobuf:"bytes,2,opt,name=default_timezone,json=defaultTimezone" json:"default_timezone,omitempty"`
	DefaultDayWeekStarts string `protobuf:"bytes,3,opt,name=default_day_week_starts,json=defaultDayWeekStarts" json:"default_day_week_starts,omitempty"`
}

func (m *CreateCompanyRequest) Reset()                    { *m = CreateCompanyRequest{} }
func (m *CreateCompanyRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateCompanyRequest) ProtoMessage()               {}
func (*CreateCompanyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateCompanyRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateCompanyRequest) GetDefaultTimezone() string {
	if m != nil {
		return m.DefaultTimezone
	}
	return ""
}

func (m *CreateCompanyRequest) GetDefaultDayWeekStarts() string {
	if m != nil {
		return m.DefaultDayWeekStarts
	}
	return ""
}

type GetCompanyRequest struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *GetCompanyRequest) Reset()                    { *m = GetCompanyRequest{} }
func (m *GetCompanyRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCompanyRequest) ProtoMessage()               {}
func (*GetCompanyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetCompanyRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Team struct {
	Uuid          string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	CompanyUuid   string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	Name          string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Archived      bool   `protobuf:"varint,4,opt,name=archived" json:"archived,omitempty"`
	Timezone      string `protobuf:"bytes,5,opt,name=timezone" json:"timezone,omitempty"`
	DayWeekStarts string `protobuf:"bytes,6,opt,name=day_week_starts,json=dayWeekStarts" json:"day_week_starts,omitempty"`
	Color         string `protobuf:"bytes,7,opt,name=color" json:"color,omitempty"`
}

func (m *Team) Reset()                    { *m = Team{} }
func (m *Team) String() string            { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()               {}
func (*Team) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Team) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Team) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Team) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *Team) GetDayWeekStarts() string {
	if m != nil {
		return m.DayWeekStarts
	}
	return ""
}

func (m *Team) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type TeamList struct {
	Teams []*Team `protobuf:"bytes,1,rep,name=teams" json:"teams,omitempty"`
}

func (m *TeamList) Reset()                    { *m = TeamList{} }
func (m *TeamList) String() string            { return proto.CompactTextString(m) }
func (*TeamList) ProtoMessage()               {}
func (*TeamList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TeamList) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type TeamListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
}

func (m *TeamListRequest) Reset()                    { *m = TeamListRequest{} }
func (m *TeamListRequest) String() string            { return proto.CompactTextString(m) }
func (*TeamListRequest) ProtoMessage()               {}
func (*TeamListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TeamListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type CreateTeamRequest struct {
	CompanyUuid   string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Timezone      string `protobuf:"bytes,3,opt,name=timezone" json:"timezone,omitempty"`
	DayWeekStarts string `protobuf:"bytes,4,opt,name=day_week_starts,json=dayWeekStarts" json:"day_week_starts,omitempty"`
	Color         string `protobuf:"bytes,5,opt,name=color" json:"color,omitempty"`
}

func (m *CreateTeamRequest) Reset()                    { *m = CreateTeamRequest{} }
func (m *CreateTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTeamRequest) ProtoMessage()               {}
func (*CreateTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CreateTeamRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateTeamRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateTeamRequest) GetTimezone() string {
	if m != nil {
		return m.Timezone
	}
	return ""
}

func (m *CreateTeamRequest) GetDayWeekStarts() string {
	if m != nil {
		return m.DayWeekStarts
	}
	return ""
}

func (m *CreateTeamRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type GetTeamRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	Uuid        string `protobuf:"bytes,2,opt,name=uuid" json:"uuid,omitempty"`
}

func (m *GetTeamRequest) Reset()                    { *m = GetTeamRequest{} }
func (m *GetTeamRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTeamRequest) ProtoMessage()               {}
func (*GetTeamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetTeamRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *GetTeamRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Job struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	Name        string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Archived    bool   `protobuf:"varint,5,opt,name=archived" json:"archived,omitempty"`
	Color       string `protobuf:"bytes,6,opt,name=color" json:"color,omitempty"`
}

func (m *Job) Reset()                    { *m = Job{} }
func (m *Job) String() string            { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()               {}
func (*Job) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Job) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Job) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Job) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Job) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Job) GetArchived() bool {
	if m != nil {
		return m.Archived
	}
	return false
}

func (m *Job) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type JobList struct {
	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *JobList) Reset()                    { *m = JobList{} }
func (m *JobList) String() string            { return proto.CompactTextString(m) }
func (*JobList) ProtoMessage()               {}
func (*JobList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *JobList) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type JobListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
}

func (m *JobListRequest) Reset()                    { *m = JobListRequest{} }
func (m *JobListRequest) String() string            { return proto.CompactTextString(m) }
func (*JobListRequest) ProtoMessage()               {}
func (*JobListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *JobListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *JobListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type CreateJobRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Color       string `protobuf:"bytes,4,opt,name=color" json:"color,omitempty"`
}

func (m *CreateJobRequest) Reset()                    { *m = CreateJobRequest{} }
func (m *CreateJobRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateJobRequest) ProtoMessage()               {}
func (*CreateJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateJobRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateJobRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *CreateJobRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateJobRequest) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type GetJobRequest struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
}

func (m *GetJobRequest) Reset()                    { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string            { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()               {}
func (*GetJobRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GetJobRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetJobRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *GetJobRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type Shift struct {
	Uuid        string                      `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	CompanyUuid string                      `protobuf:"bytes,2,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string                      `protobuf:"bytes,3,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	Start       *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	Stop        *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	UserUuid    string                      `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	JobUuid     string                      `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid" json:"job_uuid,omitempty"`
	Published   bool                        `protobuf:"varint,8,opt,name=published" json:"published,omitempty"`
}

func (m *Shift) Reset()                    { *m = Shift{} }
func (m *Shift) String() string            { return proto.CompactTextString(m) }
func (*Shift) ProtoMessage()               {}
func (*Shift) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Shift) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Shift) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Shift) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Shift) GetStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Shift) GetStop() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Stop
	}
	return nil
}

func (m *Shift) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *Shift) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *Shift) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type ShiftList struct {
	Shifts           []*Shift                    `protobuf:"bytes,1,rep,name=shifts" json:"shifts,omitempty"`
	ShiftStartAfter  *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=shift_start_after,json=shiftStartAfter" json:"shift_start_after,omitempty"`
	ShiftStartBefore *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=shift_start_before,json=shiftStartBefore" json:"shift_start_before,omitempty"`
}

func (m *ShiftList) Reset()                    { *m = ShiftList{} }
func (m *ShiftList) String() string            { return proto.CompactTextString(m) }
func (*ShiftList) ProtoMessage()               {}
func (*ShiftList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ShiftList) GetShifts() []*Shift {
	if m != nil {
		return m.Shifts
	}
	return nil
}

func (m *ShiftList) GetShiftStartAfter() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ShiftStartAfter
	}
	return nil
}

func (m *ShiftList) GetShiftStartBefore() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ShiftStartBefore
	}
	return nil
}

type ShiftListRequest struct {
	CompanyUuid      string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid         string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	UserUuid         string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	JobUuid          string `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid" json:"job_uuid,omitempty"`
	ShiftStartAfter  string `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter" json:"shift_start_after,omitempty"`
	ShiftStartBefore string `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore" json:"shift_start_before,omitempty"`
}

func (m *ShiftListRequest) Reset()                    { *m = ShiftListRequest{} }
func (m *ShiftListRequest) String() string            { return proto.CompactTextString(m) }
func (*ShiftListRequest) ProtoMessage()               {}
func (*ShiftListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *ShiftListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *ShiftListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *ShiftListRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *ShiftListRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *ShiftListRequest) GetShiftStartAfter() string {
	if m != nil {
		return m.ShiftStartAfter
	}
	return ""
}

func (m *ShiftListRequest) GetShiftStartBefore() string {
	if m != nil {
		return m.ShiftStartBefore
	}
	return ""
}

type WorkerShiftListRequest struct {
	CompanyUuid      string                      `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid         string                      `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	WorkerUuid       string                      `protobuf:"bytes,3,opt,name=worker_uuid,json=workerUuid" json:"worker_uuid,omitempty"`
	ShiftStartAfter  *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=shift_start_after,json=shiftStartAfter" json:"shift_start_after,omitempty"`
	ShiftStartBefore *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=shift_start_before,json=shiftStartBefore" json:"shift_start_before,omitempty"`
}

func (m *WorkerShiftListRequest) Reset()                    { *m = WorkerShiftListRequest{} }
func (m *WorkerShiftListRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerShiftListRequest) ProtoMessage()               {}
func (*WorkerShiftListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *WorkerShiftListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetWorkerUuid() string {
	if m != nil {
		return m.WorkerUuid
	}
	return ""
}

func (m *WorkerShiftListRequest) GetShiftStartAfter() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ShiftStartAfter
	}
	return nil
}

func (m *WorkerShiftListRequest) GetShiftStartBefore() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ShiftStartBefore
	}
	return nil
}

type BulkPublishShiftsRequest struct {
	CompanyUuid      string                      `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid         string                      `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	UserUuid         string                      `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	JobUuid          string                      `protobuf:"bytes,4,opt,name=job_uuid,json=jobUuid" json:"job_uuid,omitempty"`
	ShiftStartAfter  *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=shift_start_after,json=shiftStartAfter" json:"shift_start_after,omitempty"`
	ShiftStartBefore *google_protobuf1.Timestamp `protobuf:"bytes,6,opt,name=shift_start_before,json=shiftStartBefore" json:"shift_start_before,omitempty"`
	Published        bool                        `protobuf:"varint,7,opt,name=published" json:"published,omitempty"`
}

func (m *BulkPublishShiftsRequest) Reset()                    { *m = BulkPublishShiftsRequest{} }
func (m *BulkPublishShiftsRequest) String() string            { return proto.CompactTextString(m) }
func (*BulkPublishShiftsRequest) ProtoMessage()               {}
func (*BulkPublishShiftsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *BulkPublishShiftsRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *BulkPublishShiftsRequest) GetShiftStartAfter() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ShiftStartAfter
	}
	return nil
}

func (m *BulkPublishShiftsRequest) GetShiftStartBefore() *google_protobuf1.Timestamp {
	if m != nil {
		return m.ShiftStartBefore
	}
	return nil
}

func (m *BulkPublishShiftsRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type CreateShiftRequest struct {
	CompanyUuid string                      `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string                      `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	Start       *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=start" json:"start,omitempty"`
	Stop        *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=stop" json:"stop,omitempty"`
	UserUuid    string                      `protobuf:"bytes,6,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	JobUuid     string                      `protobuf:"bytes,7,opt,name=job_uuid,json=jobUuid" json:"job_uuid,omitempty"`
	Published   bool                        `protobuf:"varint,8,opt,name=published" json:"published,omitempty"`
}

func (m *CreateShiftRequest) Reset()                    { *m = CreateShiftRequest{} }
func (m *CreateShiftRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateShiftRequest) ProtoMessage()               {}
func (*CreateShiftRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *CreateShiftRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetStart() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *CreateShiftRequest) GetStop() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Stop
	}
	return nil
}

func (m *CreateShiftRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetJobUuid() string {
	if m != nil {
		return m.JobUuid
	}
	return ""
}

func (m *CreateShiftRequest) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

type GetShiftRequest struct {
	Uuid        string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
}

func (m *GetShiftRequest) Reset()                    { *m = GetShiftRequest{} }
func (m *GetShiftRequest) String() string            { return proto.CompactTextString(m) }
func (*GetShiftRequest) ProtoMessage()               {}
func (*GetShiftRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *GetShiftRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *GetShiftRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *GetShiftRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

// directory
type DirectoryEntry struct {
	UserUuid    string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	InternalId  string `protobuf:"bytes,2,opt,name=internal_id,json=internalId" json:"internal_id,omitempty"`
	CompanyUuid string `protobuf:"bytes,3,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	// coming from account
	Name               string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Email              string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	ConfirmedAndActive bool   `protobuf:"varint,7,opt,name=confirmed_and_active,json=confirmedAndActive" json:"confirmed_and_active,omitempty"`
	Phonenumber        string `protobuf:"bytes,8,opt,name=phonenumber" json:"phonenumber,omitempty"`
	PhotoUrl           string `protobuf:"bytes,9,opt,name=photo_url,json=photoUrl" json:"photo_url,omitempty"`
}

func (m *DirectoryEntry) Reset()                    { *m = DirectoryEntry{} }
func (m *DirectoryEntry) String() string            { return proto.CompactTextString(m) }
func (*DirectoryEntry) ProtoMessage()               {}
func (*DirectoryEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DirectoryEntry) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *DirectoryEntry) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

func (m *DirectoryEntry) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DirectoryEntry) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DirectoryEntry) GetConfirmedAndActive() bool {
	if m != nil {
		return m.ConfirmedAndActive
	}
	return false
}

func (m *DirectoryEntry) GetPhonenumber() string {
	if m != nil {
		return m.Phonenumber
	}
	return ""
}

func (m *DirectoryEntry) GetPhotoUrl() string {
	if m != nil {
		return m.PhotoUrl
	}
	return ""
}

type NewDirectoryEntry struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	Phonenumber string `protobuf:"bytes,4,opt,name=phonenumber" json:"phonenumber,omitempty"`
	InternalId  string `protobuf:"bytes,5,opt,name=internal_id,json=internalId" json:"internal_id,omitempty"`
}

func (m *NewDirectoryEntry) Reset()                    { *m = NewDirectoryEntry{} }
func (m *NewDirectoryEntry) String() string            { return proto.CompactTextString(m) }
func (*NewDirectoryEntry) ProtoMessage()               {}
func (*NewDirectoryEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *NewDirectoryEntry) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *NewDirectoryEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewDirectoryEntry) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *NewDirectoryEntry) GetPhonenumber() string {
	if m != nil {
		return m.Phonenumber
	}
	return ""
}

func (m *NewDirectoryEntry) GetInternalId() string {
	if m != nil {
		return m.InternalId
	}
	return ""
}

type DirectoryEntryRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,2,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
}

func (m *DirectoryEntryRequest) Reset()                    { *m = DirectoryEntryRequest{} }
func (m *DirectoryEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DirectoryEntryRequest) ProtoMessage()               {}
func (*DirectoryEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DirectoryEntryRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryEntryRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type DirectoryList struct {
	Accounts []*DirectoryEntry `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
	Limit    int32             `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset   int32             `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *DirectoryList) Reset()                    { *m = DirectoryList{} }
func (m *DirectoryList) String() string            { return proto.CompactTextString(m) }
func (*DirectoryList) ProtoMessage()               {}
func (*DirectoryList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DirectoryList) GetAccounts() []*DirectoryEntry {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *DirectoryList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DirectoryList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type DirectoryListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	Limit       int32  `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset      int32  `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *DirectoryListRequest) Reset()                    { *m = DirectoryListRequest{} }
func (m *DirectoryListRequest) String() string            { return proto.CompactTextString(m) }
func (*DirectoryListRequest) ProtoMessage()               {}
func (*DirectoryListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DirectoryListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *DirectoryListRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *DirectoryListRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

// admins
type AdminListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
}

func (m *AdminListRequest) Reset()                    { *m = AdminListRequest{} }
func (m *AdminListRequest) String() string            { return proto.CompactTextString(m) }
func (*AdminListRequest) ProtoMessage()               {}
func (*AdminListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *AdminListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

type Admins struct {
	CompanyUuid string            `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	Admins      []*DirectoryEntry `protobuf:"bytes,2,rep,name=admins" json:"admins,omitempty"`
}

func (m *Admins) Reset()                    { *m = Admins{} }
func (m *Admins) String() string            { return proto.CompactTextString(m) }
func (*Admins) ProtoMessage()               {}
func (*Admins) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *Admins) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Admins) GetAdmins() []*DirectoryEntry {
	if m != nil {
		return m.Admins
	}
	return nil
}

type AdminOfRequest struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
}

func (m *AdminOfRequest) Reset()                    { *m = AdminOfRequest{} }
func (m *AdminOfRequest) String() string            { return proto.CompactTextString(m) }
func (*AdminOfRequest) ProtoMessage()               {}
func (*AdminOfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *AdminOfRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type AdminOfList struct {
	UserUuid  string     `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	Companies []*Company `protobuf:"bytes,2,rep,name=companies" json:"companies,omitempty"`
}

func (m *AdminOfList) Reset()                    { *m = AdminOfList{} }
func (m *AdminOfList) String() string            { return proto.CompactTextString(m) }
func (*AdminOfList) ProtoMessage()               {}
func (*AdminOfList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *AdminOfList) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *AdminOfList) GetCompanies() []*Company {
	if m != nil {
		return m.Companies
	}
	return nil
}

// workers
type WorkerListRequest struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
}

func (m *WorkerListRequest) Reset()                    { *m = WorkerListRequest{} }
func (m *WorkerListRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerListRequest) ProtoMessage()               {}
func (*WorkerListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *WorkerListRequest) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *WorkerListRequest) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

type Workers struct {
	CompanyUuid string            `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string            `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	Workers     []*DirectoryEntry `protobuf:"bytes,3,rep,name=workers" json:"workers,omitempty"`
}

func (m *Workers) Reset()                    { *m = Workers{} }
func (m *Workers) String() string            { return proto.CompactTextString(m) }
func (*Workers) ProtoMessage()               {}
func (*Workers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *Workers) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Workers) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Workers) GetWorkers() []*DirectoryEntry {
	if m != nil {
		return m.Workers
	}
	return nil
}

type Worker struct {
	CompanyUuid string `protobuf:"bytes,1,opt,name=company_uuid,json=companyUuid" json:"company_uuid,omitempty"`
	TeamUuid    string `protobuf:"bytes,2,opt,name=team_uuid,json=teamUuid" json:"team_uuid,omitempty"`
	UserUuid    string `protobuf:"bytes,3,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
}

func (m *Worker) Reset()                    { *m = Worker{} }
func (m *Worker) String() string            { return proto.CompactTextString(m) }
func (*Worker) ProtoMessage()               {}
func (*Worker) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Worker) GetCompanyUuid() string {
	if m != nil {
		return m.CompanyUuid
	}
	return ""
}

func (m *Worker) GetTeamUuid() string {
	if m != nil {
		return m.TeamUuid
	}
	return ""
}

func (m *Worker) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type WorkerOfRequest struct {
	UserUuid string `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
}

func (m *WorkerOfRequest) Reset()                    { *m = WorkerOfRequest{} }
func (m *WorkerOfRequest) String() string            { return proto.CompactTextString(m) }
func (*WorkerOfRequest) ProtoMessage()               {}
func (*WorkerOfRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *WorkerOfRequest) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

type WorkerOfList struct {
	UserUuid string  `protobuf:"bytes,1,opt,name=user_uuid,json=userUuid" json:"user_uuid,omitempty"`
	Teams    []*Team `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
}

func (m *WorkerOfList) Reset()                    { *m = WorkerOfList{} }
func (m *WorkerOfList) String() string            { return proto.CompactTextString(m) }
func (*WorkerOfList) ProtoMessage()               {}
func (*WorkerOfList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *WorkerOfList) GetUserUuid() string {
	if m != nil {
		return m.UserUuid
	}
	return ""
}

func (m *WorkerOfList) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

type Association struct {
	Account *DirectoryEntry `protobuf:"bytes,1,opt,name=account" json:"account,omitempty"`
	Teams   []*Team         `protobuf:"bytes,2,rep,name=teams" json:"teams,omitempty"`
	Admin   bool            `protobuf:"varint,3,opt,name=admin" json:"admin,omitempty"`
}

func (m *Association) Reset()                    { *m = Association{} }
func (m *Association) String() string            { return proto.CompactTextString(m) }
func (*Association) ProtoMessage()               {}
func (*Association) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *Association) GetAccount() *DirectoryEntry {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Association) GetTeams() []*Team {
	if m != nil {
		return m.Teams
	}
	return nil
}

func (m *Association) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

type AssociationList struct {
	Accounts []*Association `protobuf:"bytes,1,rep,name=accounts" json:"accounts,omitempty"`
	Limit    int32          `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Offset   int32          `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *AssociationList) Reset()                    { *m = AssociationList{} }
func (m *AssociationList) String() string            { return proto.CompactTextString(m) }
func (*AssociationList) ProtoMessage()               {}
func (*AssociationList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *AssociationList) GetAccounts() []*Association {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AssociationList) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *AssociationList) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type TimeZoneList struct {
	Timezones []string `protobuf:"bytes,1,rep,name=timezones" json:"timezones,omitempty"`
}

func (m *TimeZoneList) Reset()                    { *m = TimeZoneList{} }
func (m *TimeZoneList) String() string            { return proto.CompactTextString(m) }
func (*TimeZoneList) ProtoMessage()               {}
func (*TimeZoneList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *TimeZoneList) GetTimezones() []string {
	if m != nil {
		return m.Timezones
	}
	return nil
}

type TimeZoneListRequest struct {
}

func (m *TimeZoneListRequest) Reset()                    { *m = TimeZoneListRequest{} }
func (m *TimeZoneListRequest) String() string            { return proto.CompactTextString(m) }
func (*TimeZoneListRequest) ProtoMessage()               {}
func (*TimeZoneListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

type ScheduledPerWeek struct {
	Week  string `protobuf:"bytes,1,opt,name=week" json:"week,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count" json:"count,omitempty"`
}

func (m *ScheduledPerWeek) Reset()                    { *m = ScheduledPerWeek{} }
func (m *ScheduledPerWeek) String() string            { return proto.CompactTextString(m) }
func (*ScheduledPerWeek) ProtoMessage()               {}
func (*ScheduledPerWeek) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ScheduledPerWeek) GetWeek() string {
	if m != nil {
		return m.Week
	}
	return ""
}

func (m *ScheduledPerWeek) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GrowthGraphResponse struct {
	PeopleScheduledPerWeek map[string]int32 `protobuf:"bytes,1,rep,name=people_scheduled_per_week,json=peopleScheduledPerWeek" json:"people_scheduled_per_week,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	PeopleOnShifts         int32            `protobuf:"varint,2,opt,name=people_on_shifts,json=peopleOnShifts" json:"people_on_shifts,omitempty"`
}

func (m *GrowthGraphResponse) Reset()                    { *m = GrowthGraphResponse{} }
func (m *GrowthGraphResponse) String() string            { return proto.CompactTextString(m) }
func (*GrowthGraphResponse) ProtoMessage()               {}
func (*GrowthGraphResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *GrowthGraphResponse) GetPeopleScheduledPerWeek() map[string]int32 {
	if m != nil {
		return m.PeopleScheduledPerWeek
	}
	return nil
}

func (m *GrowthGraphResponse) GetPeopleOnShifts() int32 {
	if m != nil {
		return m.PeopleOnShifts
	}
	return 0
}

type GrowthGraphRequest struct {
}

func (m *GrowthGraphRequest) Reset()                    { *m = GrowthGraphRequest{} }
func (m *GrowthGraphRequest) String() string            { return proto.CompactTextString(m) }
func (*GrowthGraphRequest) ProtoMessage()               {}
func (*GrowthGraphRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func init() {
	proto.RegisterType((*Company)(nil), "staffjoy.company.Company")
	proto.RegisterType((*CompanyList)(nil), "staffjoy.company.CompanyList")
	proto.RegisterType((*CompanyListRequest)(nil), "staffjoy.company.CompanyListRequest")
	proto.RegisterType((*CreateCompanyRequest)(nil), "staffjoy.company.CreateCompanyRequest")
	proto.RegisterType((*GetCompanyRequest)(nil), "staffjoy.company.GetCompanyRequest")
	proto.RegisterType((*Team)(nil), "staffjoy.company.Team")
	proto.RegisterType((*TeamList)(nil), "staffjoy.company.TeamList")
	proto.RegisterType((*TeamListRequest)(nil), "staffjoy.company.TeamListRequest")
	proto.RegisterType((*CreateTeamRequest)(nil), "staffjoy.company.CreateTeamRequest")
	proto.RegisterType((*GetTeamRequest)(nil), "staffjoy.company.GetTeamRequest")
	proto.RegisterType((*Job)(nil), "staffjoy.company.Job")
	proto.RegisterType((*JobList)(nil), "staffjoy.company.JobList")
	proto.RegisterType((*JobListRequest)(nil), "staffjoy.company.JobListRequest")
	proto.RegisterType((*CreateJobRequest)(nil), "staffjoy.company.CreateJobRequest")
	proto.RegisterType((*GetJobRequest)(nil), "staffjoy.company.GetJobRequest")
	proto.RegisterType((*Shift)(nil), "staffjoy.company.Shift")
	proto.RegisterType((*ShiftList)(nil), "staffjoy.company.ShiftList")
	proto.RegisterType((*ShiftListRequest)(nil), "staffjoy.company.ShiftListRequest")
	proto.RegisterType((*WorkerShiftListRequest)(nil), "staffjoy.company.WorkerShiftListRequest")
	proto.RegisterType((*BulkPublishShiftsRequest)(nil), "staffjoy.company.BulkPublishShiftsRequest")
	proto.RegisterType((*CreateShiftRequest)(nil), "staffjoy.company.CreateShiftRequest")
	proto.RegisterType((*GetShiftRequest)(nil), "staffjoy.company.GetShiftRequest")
	proto.RegisterType((*DirectoryEntry)(nil), "staffjoy.company.DirectoryEntry")
	proto.RegisterType((*NewDirectoryEntry)(nil), "staffjoy.company.NewDirectoryEntry")
	proto.RegisterType((*DirectoryEntryRequest)(nil), "staffjoy.company.DirectoryEntryRequest")
	proto.RegisterType((*DirectoryList)(nil), "staffjoy.company.DirectoryList")
	proto.RegisterType((*DirectoryListRequest)(nil), "staffjoy.company.DirectoryListRequest")
	proto.RegisterType((*AdminListRequest)(nil), "staffjoy.company.AdminListRequest")
	proto.RegisterType((*Admins)(nil), "staffjoy.company.Admins")
	proto.RegisterType((*AdminOfRequest)(nil), "staffjoy.company.AdminOfRequest")
	proto.RegisterType((*AdminOfList)(nil), "staffjoy.company.AdminOfList")
	proto.RegisterType((*WorkerListRequest)(nil), "staffjoy.company.WorkerListRequest")
	proto.RegisterType((*Workers)(nil), "staffjoy.company.Workers")
	proto.RegisterType((*Worker)(nil), "staffjoy.company.Worker")
	proto.RegisterType((*WorkerOfRequest)(nil), "staffjoy.company.WorkerOfRequest")
	proto.RegisterType((*WorkerOfList)(nil), "staffjoy.company.WorkerOfList")
	proto.RegisterType((*Association)(nil), "staffjoy.company.Association")
	proto.RegisterType((*AssociationList)(nil), "staffjoy.company.AssociationList")
	proto.RegisterType((*TimeZoneList)(nil), "staffjoy.company.TimeZoneList")
	proto.RegisterType((*TimeZoneListRequest)(nil), "staffjoy.company.TimeZoneListRequest")
	proto.RegisterType((*ScheduledPerWeek)(nil), "staffjoy.company.ScheduledPerWeek")
	proto.RegisterType((*GrowthGraphResponse)(nil), "staffjoy.company.GrowthGraphResponse")
	proto.RegisterType((*GrowthGraphRequest)(nil), "staffjoy.company.GrowthGraphRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CompanyService service

type CompanyServiceClient interface {
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error)
	GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error)
	// teams
	CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error)
	ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error)
	GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error)
	UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error)
	GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error)
	CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error)
	ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error)
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error)
	UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error)
	CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error)
	BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error)
	GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error)
	DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error)
	// Directory
	CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error)
	GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error)
	GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// Admins
	ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error)
	CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Workers
	ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error)
	GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error)
	GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error)
	GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error)
}

type companyServiceClient struct {
	cc *grpc.ClientConn
}

func NewCompanyServiceClient(cc *grpc.ClientConn) CompanyServiceClient {
	return &companyServiceClient{cc}
}

func (c *companyServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListCompanies(ctx context.Context, in *CompanyListRequest, opts ...grpc.CallOption) (*CompanyList, error) {
	out := new(CompanyList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListCompanies", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetCompany(ctx context.Context, in *GetCompanyRequest, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateCompany(ctx context.Context, in *Company, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateCompany", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateTeam(ctx context.Context, in *CreateTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTeams(ctx context.Context, in *TeamListRequest, opts ...grpc.CallOption) (*TeamList, error) {
	out := new(TeamList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTeams", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetTeam(ctx context.Context, in *GetTeamRequest, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateTeam(ctx context.Context, in *Team, opts ...grpc.CallOption) (*Team, error) {
	out := new(Team)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateTeam", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerTeamInfo(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*Worker, error) {
	out := new(Worker)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerTeamInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateJob(ctx context.Context, in *CreateJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListJobs(ctx context.Context, in *JobListRequest, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListJobs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateJob(ctx context.Context, in *Job, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateJob", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateShift(ctx context.Context, in *CreateShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListShifts(ctx context.Context, in *ShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListShifts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkerShifts(ctx context.Context, in *WorkerShiftListRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkerShifts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) BulkPublishShifts(ctx context.Context, in *BulkPublishShiftsRequest, opts ...grpc.CallOption) (*ShiftList, error) {
	out := new(ShiftList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/BulkPublishShifts", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteShift(ctx context.Context, in *GetShiftRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateShift(ctx context.Context, in *Shift, opts ...grpc.CallOption) (*Shift, error) {
	out := new(Shift)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateShift", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateDirectory(ctx context.Context, in *NewDirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateDirectory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) Directory(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*DirectoryList, error) {
	out := new(DirectoryList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/Directory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAssociations(ctx context.Context, in *DirectoryListRequest, opts ...grpc.CallOption) (*AssociationList, error) {
	out := new(AssociationList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAssociations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetDirectoryEntry(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetDirectoryEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) UpdateDirectoryEntry(ctx context.Context, in *DirectoryEntry, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/UpdateDirectoryEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListAdmins(ctx context.Context, in *AdminListRequest, opts ...grpc.CallOption) (*Admins, error) {
	out := new(Admins)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListAdmins", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteAdmin(ctx context.Context, in *DirectoryEntryRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListWorkers(ctx context.Context, in *WorkerListRequest, opts ...grpc.CallOption) (*Workers, error) {
	out := new(Workers)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListWorkers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) DeleteWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/DeleteWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) CreateWorker(ctx context.Context, in *Worker, opts ...grpc.CallOption) (*DirectoryEntry, error) {
	out := new(DirectoryEntry)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/CreateWorker", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) ListTimeZones(ctx context.Context, in *TimeZoneListRequest, opts ...grpc.CallOption) (*TimeZoneList, error) {
	out := new(TimeZoneList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/ListTimeZones", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GrowthGraph(ctx context.Context, in *GrowthGraphRequest, opts ...grpc.CallOption) (*GrowthGraphResponse, error) {
	out := new(GrowthGraphResponse)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GrowthGraph", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetWorkerOf(ctx context.Context, in *WorkerOfRequest, opts ...grpc.CallOption) (*WorkerOfList, error) {
	out := new(WorkerOfList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetWorkerOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *companyServiceClient) GetAdminOf(ctx context.Context, in *AdminOfRequest, opts ...grpc.CallOption) (*AdminOfList, error) {
	out := new(AdminOfList)
	err := grpc.Invoke(ctx, "/staffjoy.company.CompanyService/GetAdminOf", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CompanyService service

type CompanyServiceServer interface {
	CreateCompany(context.Context, *CreateCompanyRequest) (*Company, error)
	ListCompanies(context.Context, *CompanyListRequest) (*CompanyList, error)
	GetCompany(context.Context, *GetCompanyRequest) (*Company, error)
	UpdateCompany(context.Context, *Company) (*Company, error)
	// teams
	CreateTeam(context.Context, *CreateTeamRequest) (*Team, error)
	ListTeams(context.Context, *TeamListRequest) (*TeamList, error)
	GetTeam(context.Context, *GetTeamRequest) (*Team, error)
	UpdateTeam(context.Context, *Team) (*Team, error)
	GetWorkerTeamInfo(context.Context, *Worker) (*Worker, error)
	CreateJob(context.Context, *CreateJobRequest) (*Job, error)
	ListJobs(context.Context, *JobListRequest) (*JobList, error)
	GetJob(context.Context, *GetJobRequest) (*Job, error)
	UpdateJob(context.Context, *Job) (*Job, error)
	CreateShift(context.Context, *CreateShiftRequest) (*Shift, error)
	ListShifts(context.Context, *ShiftListRequest) (*ShiftList, error)
	ListWorkerShifts(context.Context, *WorkerShiftListRequest) (*ShiftList, error)
	BulkPublishShifts(context.Context, *BulkPublishShiftsRequest) (*ShiftList, error)
	GetShift(context.Context, *GetShiftRequest) (*Shift, error)
	DeleteShift(context.Context, *GetShiftRequest) (*google_protobuf2.Empty, error)
	UpdateShift(context.Context, *Shift) (*Shift, error)
	// Directory
	CreateDirectory(context.Context, *NewDirectoryEntry) (*DirectoryEntry, error)
	Directory(context.Context, *DirectoryListRequest) (*DirectoryList, error)
	GetAssociations(context.Context, *DirectoryListRequest) (*AssociationList, error)
	GetDirectoryEntry(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	UpdateDirectoryEntry(context.Context, *DirectoryEntry) (*DirectoryEntry, error)
	// Admins
	ListAdmins(context.Context, *AdminListRequest) (*Admins, error)
	CreateAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	GetAdmin(context.Context, *DirectoryEntryRequest) (*DirectoryEntry, error)
	DeleteAdmin(context.Context, *DirectoryEntryRequest) (*google_protobuf2.Empty, error)
	// Workers
	ListWorkers(context.Context, *WorkerListRequest) (*Workers, error)
	GetWorker(context.Context, *Worker) (*DirectoryEntry, error)
	DeleteWorker(context.Context, *Worker) (*google_protobuf2.Empty, error)
	CreateWorker(context.Context, *Worker) (*DirectoryEntry, error)
	// timezones
	ListTimeZones(context.Context, *TimeZoneListRequest) (*TimeZoneList, error)
	// growth graph
	GrowthGraph(context.Context, *GrowthGraphRequest) (*GrowthGraphResponse, error)
	GetWorkerOf(context.Context, *WorkerOfRequest) (*WorkerOfList, error)
	GetAdminOf(context.Context, *AdminOfRequest) (*AdminOfList, error)
}

func RegisterCompanyServiceServer(s *grpc.Server, srv CompanyServiceServer) {
	s.RegisterService(&_CompanyService_serviceDesc, srv)
}

func _CompanyService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListCompanies(ctx, req.(*CompanyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetCompany(ctx, req.(*GetCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Company)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateCompany(ctx, req.(*Company))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateTeam(ctx, req.(*CreateTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeamListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTeams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTeams(ctx, req.(*TeamListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetTeam(ctx, req.(*GetTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Team)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateTeam(ctx, req.(*Team))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerTeamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerTeamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerTeamInfo(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateJob(ctx, req.(*CreateJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListJobs(ctx, req.(*JobListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Job)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateJob(ctx, req.(*Job))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateShift(ctx, req.(*CreateShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListShifts(ctx, req.(*ShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkerShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerShiftListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkerShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkerShifts(ctx, req.(*WorkerShiftListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_BulkPublishShifts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkPublishShiftsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/BulkPublishShifts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).BulkPublishShifts(ctx, req.(*BulkPublishShiftsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShiftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteShift(ctx, req.(*GetShiftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateShift_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Shift)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateShift(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateShift",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateShift(ctx, req.(*Shift))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateDirectory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateDirectory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateDirectory(ctx, req.(*NewDirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_Directory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).Directory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/Directory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).Directory(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAssociations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAssociations(ctx, req.(*DirectoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetDirectoryEntry(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_UpdateDirectoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/UpdateDirectoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).UpdateDirectoryEntry(ctx, req.(*DirectoryEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListAdmins_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListAdmins(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListAdmins",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListAdmins(ctx, req.(*AdminListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteAdmin(ctx, req.(*DirectoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListWorkers(ctx, req.(*WorkerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_DeleteWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/DeleteWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).DeleteWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_CreateWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Worker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).CreateWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/CreateWorker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).CreateWorker(ctx, req.(*Worker))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_ListTimeZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeZoneListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/ListTimeZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).ListTimeZones(ctx, req.(*TimeZoneListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GrowthGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrowthGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GrowthGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GrowthGraph(ctx, req.(*GrowthGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetWorkerOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetWorkerOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetWorkerOf(ctx, req.(*WorkerOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompanyService_GetAdminOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminOfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/staffjoy.company.CompanyService/GetAdminOf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyServiceServer).GetAdminOf(ctx, req.(*AdminOfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CompanyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "staffjoy.company.CompanyService",
	HandlerType: (*CompanyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCompany",
			Handler:    _CompanyService_CreateCompany_Handler,
		},
		{
			MethodName: "ListCompanies",
			Handler:    _CompanyService_ListCompanies_Handler,
		},
		{
			MethodName: "GetCompany",
			Handler:    _CompanyService_GetCompany_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CompanyService_UpdateCompany_Handler,
		},
		{
			MethodName: "CreateTeam",
			Handler:    _CompanyService_CreateTeam_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _CompanyService_ListTeams_Handler,
		},
		{
			MethodName: "GetTeam",
			Handler:    _CompanyService_GetTeam_Handler,
		},
		{
			MethodName: "UpdateTeam",
			Handler:    _CompanyService_UpdateTeam_Handler,
		},
		{
			MethodName: "GetWorkerTeamInfo",
			Handler:    _CompanyService_GetWorkerTeamInfo_Handler,
		},
		{
			MethodName: "CreateJob",
			Handler:    _CompanyService_CreateJob_Handler,
		},
		{
			MethodName: "ListJobs",
			Handler:    _CompanyService_ListJobs_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _CompanyService_GetJob_Handler,
		},
		{
			MethodName: "UpdateJob",
			Handler:    _CompanyService_UpdateJob_Handler,
		},
		{
			MethodName: "CreateShift",
			Handler:    _CompanyService_CreateShift_Handler,
		},
		{
			MethodName: "ListShifts",
			Handler:    _CompanyService_ListShifts_Handler,
		},
		{
			MethodName: "ListWorkerShifts",
			Handler:    _CompanyService_ListWorkerShifts_Handler,
		},
		{
			MethodName: "BulkPublishShifts",
			Handler:    _CompanyService_BulkPublishShifts_Handler,
		},
		{
			MethodName: "GetShift",
			Handler:    _CompanyService_GetShift_Handler,
		},
		{
			MethodName: "DeleteShift",
			Handler:    _CompanyService_DeleteShift_Handler,
		},
		{
			MethodName: "UpdateShift",
			Handler:    _CompanyService_UpdateShift_Handler,
		},
		{
			MethodName: "CreateDirectory",
			Handler:    _CompanyService_CreateDirectory_Handler,
		},
		{
			MethodName: "Directory",
			Handler:    _CompanyService_Directory_Handler,
		},
		{
			MethodName: "GetAssociations",
			Handler:    _CompanyService_GetAssociations_Handler,
		},
		{
			MethodName: "GetDirectoryEntry",
			Handler:    _CompanyService_GetDirectoryEntry_Handler,
		},
		{
			MethodName: "UpdateDirectoryEntry",
			Handler:    _CompanyService_UpdateDirectoryEntry_Handler,
		},
		{
			MethodName: "ListAdmins",
			Handler:    _CompanyService_ListAdmins_Handler,
		},
		{
			MethodName: "CreateAdmin",
			Handler:    _CompanyService_CreateAdmin_Handler,
		},
		{
			MethodName: "GetAdmin",
			Handler:    _CompanyService_GetAdmin_Handler,
		},
		{
			MethodName: "DeleteAdmin",
			Handler:    _CompanyService_DeleteAdmin_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _CompanyService_ListWorkers_Handler,
		},
		{
			MethodName: "GetWorker",
			Handler:    _CompanyService_GetWorker_Handler,
		},
		{
			MethodName: "DeleteWorker",
			Handler:    _CompanyService_DeleteWorker_Handler,
		},
		{
			MethodName: "CreateWorker",
			Handler:    _CompanyService_CreateWorker_Handler,
		},
		{
			MethodName: "ListTimeZones",
			Handler:    _CompanyService_ListTimeZones_Handler,
		},
		{
			MethodName: "GrowthGraph",
			Handler:    _CompanyService_GrowthGraph_Handler,
		},
		{
			MethodName: "GetWorkerOf",
			Handler:    _CompanyService_GetWorkerOf_Handler,
		},
		{
			MethodName: "GetAdminOf",
			Handler:    _CompanyService_GetAdminOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "company.proto",
}

func init() { proto.RegisterFile("company.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2637 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xcc, 0x59, 0x5d, 0x6f, 0x1b, 0xc7,
	0xd5, 0xce, 0x92, 0x22, 0x45, 0x1e, 0x5a, 0x5f, 0x13, 0x49, 0xa1, 0x56, 0x8a, 0x29, 0x4f, 0x62,
	0x5b, 0x51, 0x2c, 0x31, 0x76, 0xec, 0x37, 0x86, 0xe2, 0x38, 0x96, 0x2c, 0x43, 0xaf, 0xd5, 0x0f,
	0x0b, 0x94, 0x0d, 0x03, 0xb9, 0x21, 0x96, 0xe4, 0x50, 0x5a, 0x89, 0xe4, 0xb2, 0xbb, 0x4b, 0xa9,
	0x4a, 0x62, 0xc0, 0x2d, 0x8a, 0xd6, 0x40, 0x9c, 0xb6, 0x40, 0x6e, 0x9a, 0x02, 0xfd, 0x00, 0xda,
	0xcb, 0xa2, 0xbf, 0x23, 0x17, 0xbd, 0x28, 0x50, 0xa0, 0x97, 0x6a, 0x61, 0xe4, 0xa2, 0xd7, 0xfa,
	0x05, 0xc5, 0x9c, 0x99, 0x5d, 0x2e, 0x77, 0x97, 0xe4, 0x52, 0x52, 0xd1, 0xde, 0x71, 0x77, 0xce,
	0x9c, 0xf3, 0xcc, 0x73, 0x9e, 0x39, 0x33, 0x7b, 0x08, 0x23, 0x65, 0xa3, 0xde, 0xd4, 0x1a, 0x47,
	0xcb, 0x4d, 0xd3, 0xb0, 0x0d, 0x32, 0x6e, 0xd9, 0x5a, 0xb5, 0xba, 0x67, 0x1c, 0x2d, 0xcb, 0xf7,
	0xea, 0xdc, 0x8e, 0x61, 0xec, 0xd4, 0x58, 0x5e, 0x6b, 0xea, 0x79, 0xad, 0xd1, 0x30, 0x6c, 0xcd,
	0xd6, 0x8d, 0x86, 0x25, 0xec, 0xd5, 0x9c, 0x1c, 0xc5, 0xa7, 0x52, 0xab, 0x9a, 0xb7, 0xf5, 0x3a,
	0xb3, 0x6c, 0xad, 0xde, 0x94, 0x06, 0xb3, 0x7e, 0x03, 0x56, 0x6f, 0xda, 0x32, 0x9a, 0xba, 0xb4,
	0xa3, 0xdb, 0xbb, 0xad, 0x12, 0x8f, 0x95, 0xdf, 0x31, 0x76, 0x8c, 0xb6, 0x15, 0x7f, 0xc2, 0x07,
	0xfc, 0x25, 0xcc, 0xe9, 0x6f, 0x62, 0x30, 0x7c, 0x5f, 0xc0, 0x22, 0x97, 0x60, 0xa8, 0xd5, 0xd2,
	0x2b, 0x59, 0x65, 0x5e, 0x59, 0x48, 0xaf, 0x8d, 0x9c, 0x1c, 0xe7, 0xd2, 0x95, 0xd2, 0x0a, 0xe5,
	0xef, 0x68, 0x01, 0x87, 0xb8, 0x49, 0x43, 0xab, 0xb3, 0x6c, 0xac, 0xd3, 0x84, 0xbf, 0xa3, 0x05,
	0x1c, 0x22, 0x4b, 0x90, 0xd2, 0xcc, 0xf2, 0xae, 0x7e, 0xc0, 0x2a, 0xd9, 0xf8, 0xbc, 0xb2, 0x90,
	0x5a, 0x9b, 0x38, 0x39, 0xce, 0x8d, 0x70, 0x33, 0xe7, 0x3d, 0x2d, 0xb8, 0x26, 0x64, 0x1d, 0xc6,
	0x2b, 0xac, 0xaa, 0xb5, 0x6a, 0x76, 0x91, 0xaf, 0xf3, 0x53, 0xa3, 0xc1, 0xb2, 0x43, 0xe8, 0x7d,
	0xe6, 0xe4, 0x38, 0x37, 0xc5, 0xa7, 0xf9, 0xc7, 0x69, 0x61, 0x4c, 0xbe, 0x7a, 0x2c, 0xdf, 0x90,
	0xa7, 0xf0, 0x86, 0x63, 0x55, 0xd1, 0x8e, 0x8a, 0x87, 0x8c, 0xed, 0x17, 0x2d, 0x5b, 0x33, 0x6d,
	0x2b, 0x9b, 0x40, 0x67, 0xf3, 0x27, 0xc7, 0xb9, 0x39, 0xaf, 0x33, 0x9f, 0x19, 0x2d, 0x4c, 0xca,
	0x91, 0x75, 0xed, 0xe8, 0x29, 0x63, 0xfb, 0xdb, 0xe2, 0xf5, 0xa7, 0x90, 0x91, 0xf4, 0x7c, 0x57,
	0xb7, 0x6c, 0xf2, 0x11, 0xa4, 0x45, 0x12, 0x75, 0x66, 0x65, 0x95, 0xf9, 0xf8, 0x42, 0xe6, 0xc6,
	0xcc, 0xb2, 0x3f, 0xbf, 0xcb, 0x72, 0xc6, 0xda, 0xd0, 0x37, 0xc7, 0xb9, 0xd7, 0x0a, 0xed, 0x19,
	0x64, 0x12, 0x12, 0x35, 0xbd, 0xae, 0xdb, 0xc8, 0x5f, 0xa2, 0x20, 0x1e, 0xc8, 0x34, 0x24, 0x8d,
	0x6a, 0xd5, 0x62, 0x36, 0xf2, 0x95, 0x28, 0xc8, 0x27, 0xba, 0x06, 0xc4, 0x13, 0xbb, 0xc0, 0x7e,
	0xd0, 0x62, 0x96, 0xd7, 0x5a, 0xf1, 0x5a, 0x87, 0xfb, 0xa6, 0x2f, 0x15, 0x98, 0xbc, 0x6f, 0x32,
	0xcd, 0x66, 0xd2, 0x95, 0xe3, 0x86, 0xc8, 0x4c, 0x62, 0xb2, 0x65, 0xea, 0xde, 0x09, 0xc9, 0x05,
	0x66, 0x3a, 0x48, 0xf8, 0xad, 0xee, 0x84, 0xc7, 0x71, 0x46, 0x38, 0x9d, 0x57, 0x61, 0x62, 0x83,
	0xd9, 0x41, 0x28, 0x6d, 0xdd, 0x09, 0xa1, 0xd1, 0xbf, 0xc4, 0x60, 0xe8, 0x31, 0xd3, 0xea, 0x51,
	0x44, 0x79, 0x1b, 0x2e, 0x48, 0xe6, 0x8b, 0x68, 0x2a, 0xc4, 0x39, 0x75, 0x72, 0x9c, 0x9b, 0xe0,
	0xa6, 0xde, 0x31, 0x5a, 0xc8, 0xc8, 0xc7, 0x27, 0x5e, 0x39, 0xc7, 0xa3, 0xc9, 0x79, 0xa8, 0xbf,
	0x9c, 0x97, 0x20, 0xe5, 0x52, 0x27, 0x94, 0xe7, 0x9a, 0xb7, 0xe5, 0xeb, 0x9a, 0x90, 0x7b, 0x30,
	0xe6, 0xa7, 0x2f, 0x89, 0xb3, 0xb2, 0x27, 0xc7, 0xb9, 0x49, 0xd4, 0xab, 0x5f, 0xa7, 0x23, 0x15,
	0x2f, 0xa3, 0xe4, 0x6d, 0x48, 0x94, 0x8d, 0x9a, 0x61, 0x66, 0x87, 0x71, 0xde, 0xe8, 0xc9, 0x71,
	0x0e, 0xc4, 0xaa, 0x6b, 0x86, 0x49, 0x0b, 0x62, 0x90, 0xde, 0x85, 0x14, 0x67, 0x13, 0x35, 0x7c,
	0x03, 0x12, 0x36, 0xd3, 0xea, 0x8e, 0x7e, 0xa7, 0x83, 0xfa, 0xe5, 0xa6, 0x52, 0xbc, 0xc2, 0x94,
	0xde, 0x84, 0x31, 0x67, 0xbe, 0x93, 0xb5, 0x4b, 0x3e, 0xd6, 0x45, 0xf6, 0xbc, 0xf4, 0xd2, 0x3f,
	0x2a, 0x30, 0x21, 0xc4, 0xc7, 0x27, 0x47, 0x9f, 0xe8, 0x8a, 0x33, 0xe6, 0x11, 0xa7, 0xea, 0x61,
	0x56, 0x48, 0xac, 0x4d, 0xe3, 0x95, 0x20, 0x8d, 0x58, 0x43, 0xfc, 0x64, 0x4d, 0x3a, 0x64, 0x61,
	0x6a, 0x1c, 0x72, 0x36, 0x60, 0x74, 0x83, 0xd9, 0x83, 0x43, 0x6c, 0x8b, 0x4d, 0x8a, 0xf6, 0x79,
	0x0c, 0xe2, 0x9b, 0x46, 0x29, 0x8a, 0x66, 0x97, 0x42, 0x35, 0x0b, 0x27, 0xc7, 0xb9, 0x24, 0x37,
	0x5d, 0xf2, 0x09, 0x35, 0x0f, 0x69, 0x9e, 0x08, 0x61, 0x2b, 0xd4, 0x4a, 0x4e, 0x8e, 0x73, 0xa3,
	0xa8, 0x2b, 0x67, 0x80, 0x0b, 0x8b, 0x69, 0xf5, 0x0e, 0x65, 0x0f, 0x45, 0x53, 0x76, 0xa2, 0xbf,
	0xb2, 0x5d, 0xa1, 0x25, 0x7b, 0x09, 0x6d, 0x05, 0x86, 0x37, 0x8d, 0x12, 0xea, 0x2c, 0x0f, 0x43,
	0x7b, 0x46, 0xc9, 0x91, 0xd9, 0x54, 0x50, 0x66, 0x9b, 0x46, 0x49, 0xaa, 0x0c, 0x0d, 0xe9, 0x16,
	0x8c, 0xca, 0xb9, 0x03, 0xe4, 0x61, 0xd6, 0xcb, 0x4c, 0x4c, 0xea, 0x42, 0xb2, 0x40, 0x3f, 0x87,
	0x71, 0xa1, 0xbf, 0x4d, 0xa3, 0x74, 0x4e, 0x3e, 0x5d, 0x6d, 0xc6, 0x3d, 0xda, 0x74, 0x75, 0x35,
	0xe4, 0xd5, 0x55, 0x19, 0x46, 0x36, 0x98, 0xed, 0x09, 0x1d, 0x52, 0xe8, 0x02, 0x70, 0x62, 0x7d,
	0xe0, 0xc4, 0x7d, 0x4b, 0xfc, 0x53, 0x1c, 0x12, 0xdb, 0xbb, 0x7a, 0xd5, 0xfe, 0x5f, 0x50, 0xdd,
	0xff, 0x43, 0x02, 0xb7, 0x1f, 0xf2, 0x90, 0xb9, 0xa1, 0x2e, 0x8b, 0x9b, 0xca, 0xb2, 0x73, 0x07,
	0x59, 0x7e, 0xec, 0x5c, 0x65, 0xd6, 0xa6, 0x79, 0xe2, 0x1d, 0x0d, 0xe1, 0x24, 0xfa, 0xcb, 0x7f,
	0xe4, 0x94, 0x82, 0x70, 0x40, 0x1e, 0xc0, 0x90, 0x65, 0x1b, 0x4d, 0x14, 0x66, 0x6f, 0x47, 0x53,
	0xd2, 0x51, 0x5a, 0x38, 0x32, 0x9a, 0xc2, 0x0f, 0x4e, 0xe7, 0x2b, 0x68, 0x59, 0xcc, 0x14, 0x2b,
	0x48, 0x76, 0xae, 0xc0, 0x1d, 0xa0, 0x85, 0x14, 0xff, 0x8d, 0x2b, 0xb8, 0x06, 0xa9, 0x3d, 0xa3,
	0x24, 0xec, 0x87, 0x3b, 0xeb, 0xb7, 0xf3, 0x9e, 0x16, 0x86, 0xf7, 0x8c, 0x12, 0x5a, 0xbf, 0x07,
	0xe9, 0x66, 0xab, 0x54, 0xd3, 0xad, 0x5d, 0x56, 0xc9, 0xa6, 0x70, 0x0f, 0xb9, 0xee, 0xdd, 0x01,
	0x5a, 0x68, 0x1b, 0xd1, 0x7f, 0x29, 0x90, 0xc6, 0x74, 0xe1, 0x16, 0xb9, 0x05, 0x49, 0x8b, 0x3f,
	0x38, 0x9b, 0xe4, 0x8d, 0xe0, 0x26, 0x41, 0x63, 0xb9, 0x4d, 0xa4, 0x31, 0xd9, 0x82, 0x09, 0xfc,
	0x25, 0x6a, 0x5d, 0x51, 0xab, 0xda, 0xcc, 0xc4, 0x5c, 0xf6, 0x66, 0x2a, 0xc5, 0x9d, 0x20, 0x39,
	0x63, 0x38, 0x1d, 0x8b, 0xe2, 0x2a, 0x9f, 0x4c, 0x0a, 0x40, 0xbc, 0x1e, 0x4b, 0xac, 0x6a, 0x98,
	0x42, 0xe2, 0x51, 0x5d, 0x8e, 0xb7, 0x5d, 0xae, 0xe1, 0x6c, 0xfa, 0xad, 0x02, 0xe3, 0xee, 0x52,
	0xcf, 0x6b, 0xf7, 0xcd, 0x7a, 0x13, 0x2a, 0xf7, 0x82, 0x9b, 0xbc, 0x19, 0x4f, 0xf2, 0xc4, 0x4e,
	0x74, 0x33, 0xb5, 0x18, 0x46, 0x99, 0x38, 0x05, 0x02, 0x64, 0x5c, 0x0b, 0x25, 0x03, 0xd5, 0x13,
	0xb2, 0xcc, 0xdf, 0xc5, 0x60, 0xfa, 0xa9, 0x61, 0xee, 0x33, 0xf3, 0xdc, 0x17, 0x9b, 0x83, 0xcc,
	0x21, 0x7a, 0xf6, 0x2e, 0x17, 0xc4, 0x2b, 0x34, 0x08, 0x15, 0xc2, 0xd0, 0xf9, 0x0b, 0x21, 0x71,
	0x26, 0x21, 0xfc, 0x3d, 0x06, 0xd9, 0xb5, 0x56, 0x6d, 0x7f, 0x4b, 0xec, 0x02, 0xa4, 0xc9, 0xfa,
	0x6f, 0x0b, 0x62, 0xab, 0x9b, 0x20, 0xce, 0x99, 0xba, 0xe4, 0x59, 0xa8, 0x23, 0x73, 0xde, 0x02,
	0xc3, 0xeb, 0x51, 0xca, 0x5b, 0x4c, 0x7e, 0x1f, 0x03, 0x22, 0xce, 0x37, 0xe4, 0xf4, 0xbc, 0x28,
	0x5d, 0x89, 0x5e, 0xc5, 0xdb, 0xd8, 0x65, 0xdd, 0xbe, 0x1d, 0xb9, 0x6e, 0xb7, 0xa7, 0x8a, 0x52,
	0x3d, 0x1b, 0x28, 0xd5, 0x5d, 0x12, 0x39, 0xdc, 0x99, 0xc8, 0xb9, 0x40, 0x0d, 0xf6, 0x52, 0xc4,
	0x60, 0x6c, 0x83, 0xd9, 0x1d, 0xf4, 0x84, 0x9d, 0xc2, 0x3d, 0xf9, 0xf0, 0xf3, 0x19, 0x0f, 0xde,
	0x74, 0x5f, 0xc6, 0x60, 0x74, 0x5d, 0x37, 0x59, 0xd9, 0x36, 0xcc, 0xa3, 0x07, 0x0d, 0xdb, 0x3c,
	0xea, 0x5c, 0x8f, 0xe2, 0x5b, 0x4f, 0x0e, 0x32, 0x7a, 0xc3, 0x66, 0x66, 0x43, 0xab, 0x15, 0xdd,
	0x88, 0xe0, 0xbc, 0x7a, 0x18, 0x25, 0xa6, 0x7b, 0x11, 0x49, 0x74, 0x5e, 0x44, 0x58, 0x5d, 0xd3,
	0x6b, 0x92, 0x40, 0xf1, 0x40, 0xde, 0x83, 0xc9, 0xb2, 0xd1, 0xa8, 0xea, 0x66, 0x9d, 0x55, 0x8a,
	0x5a, 0xa3, 0x52, 0xd4, 0xca, 0xb6, 0x7e, 0xc0, 0xa4, 0xa0, 0x88, 0x3b, 0xb6, 0xda, 0xa8, 0xac,
	0xe2, 0x08, 0x99, 0x87, 0x4c, 0x73, 0xd7, 0x68, 0xb0, 0x46, 0xab, 0x5e, 0x62, 0x26, 0xd2, 0x9a,
	0x2e, 0x78, 0x5f, 0xf1, 0xe5, 0x35, 0x77, 0x0d, 0xdb, 0x28, 0xb6, 0xcc, 0x5a, 0x36, 0x2d, 0x96,
	0x87, 0x2f, 0x9e, 0x98, 0x35, 0xfa, 0x07, 0x05, 0x26, 0xbe, 0xcf, 0x0e, 0x7d, 0x8c, 0x9c, 0xf2,
	0xe2, 0xef, 0xae, 0x29, 0xee, 0x5d, 0x93, 0x0f, 0xe1, 0x50, 0x10, 0xa1, 0x8f, 0xe3, 0x84, 0x9f,
	0x63, 0xfa, 0x14, 0xa6, 0x3a, 0x11, 0x0e, 0xb6, 0x81, 0xda, 0xd9, 0x8d, 0x75, 0x66, 0x97, 0xfe,
	0x48, 0x81, 0x11, 0xd7, 0x33, 0x1e, 0xf4, 0x6b, 0x90, 0xd2, 0xca, 0x65, 0xa3, 0xd5, 0x70, 0x8f,
	0xfa, 0xf9, 0xe0, 0x51, 0xdf, 0x09, 0x46, 0x9e, 0xf9, 0xee, 0xbc, 0x01, 0x9b, 0x07, 0x3b, 0x30,
	0xd9, 0x01, 0x61, 0x80, 0xb5, 0x0d, 0x16, 0xe8, 0x16, 0x8c, 0xaf, 0x56, 0xea, 0x7a, 0x63, 0xc0,
	0x6f, 0xc3, 0x7d, 0x48, 0xe2, 0x34, 0x2b, 0x0a, 0xa2, 0xbb, 0x90, 0xd4, 0xd0, 0x38, 0x1b, 0x1b,
	0x88, 0x3c, 0x39, 0x8b, 0x2e, 0xc1, 0x28, 0x06, 0x7b, 0x54, 0x75, 0x10, 0xf6, 0xda, 0x9d, 0x54,
	0x87, 0x8c, 0x34, 0xc7, 0xe4, 0xf5, 0xdc, 0xc9, 0x1d, 0x1d, 0xa1, 0xd8, 0xa0, 0x1d, 0x21, 0xba,
	0x0d, 0x13, 0xe2, 0xf2, 0x70, 0x9e, 0x9f, 0x3d, 0x5f, 0x28, 0x30, 0x2c, 0xbc, 0x5a, 0x67, 0x3e,
	0x0c, 0xee, 0xc1, 0xb0, 0xb8, 0x70, 0x58, 0xd9, 0xf8, 0x40, 0xdc, 0x3b, 0xd3, 0x28, 0x83, 0xa4,
	0x00, 0xf3, 0x1f, 0x3d, 0xeb, 0xe9, 0x32, 0x8c, 0x89, 0x30, 0x11, 0x93, 0x5c, 0x84, 0x0b, 0x8e,
	0x7d, 0xff, 0x2c, 0xbb, 0x3d, 0x93, 0x58, 0xf4, 0x9e, 0xc9, 0xd7, 0x0a, 0x64, 0x56, 0x2d, 0xcb,
	0x28, 0xeb, 0xd8, 0xde, 0xe5, 0x4c, 0xca, 0xbd, 0x8c, 0xee, 0x07, 0x60, 0x52, 0x4e, 0x3b, 0x0d,
	0x0a, 0xbe, 0x99, 0x71, 0x13, 0x88, 0x5e, 0x6c, 0x41, 0x3c, 0xd0, 0xe7, 0x0a, 0x8c, 0x79, 0xb0,
	0x21, 0x01, 0x1f, 0x07, 0x6a, 0xd4, 0x9b, 0xc1, 0x00, 0x9e, 0x49, 0x67, 0x2c, 0x50, 0xd7, 0xe0,
	0x02, 0xbf, 0x0c, 0x7c, 0x62, 0x34, 0x18, 0x86, 0x9f, 0x83, 0xb4, 0xd3, 0xcf, 0x11, 0xf1, 0xd3,
	0x85, 0xf6, 0x0b, 0x3a, 0x05, 0xaf, 0x7b, 0xad, 0x65, 0x86, 0xe9, 0x1d, 0x18, 0xdf, 0x2e, 0xef,
	0xb2, 0x4a, 0xab, 0xc6, 0x2a, 0x5b, 0xcc, 0x7c, 0xca, 0xd8, 0x3e, 0x3f, 0x43, 0x0e, 0x19, 0xdb,
	0x77, 0xce, 0x77, 0xfe, 0x5b, 0x7c, 0xa0, 0x73, 0xe6, 0x25, 0x34, 0x7c, 0xa0, 0x2f, 0x62, 0xf0,
	0xfa, 0x86, 0x69, 0x1c, 0xda, 0xbb, 0x1b, 0xa6, 0xd6, 0xdc, 0x2d, 0x30, 0xab, 0x69, 0x34, 0x2c,
	0x46, 0x3e, 0x87, 0x99, 0x26, 0x33, 0x9a, 0x35, 0x56, 0xb4, 0x1c, 0xe7, 0xc5, 0x26, 0x33, 0x8b,
	0xd2, 0x2d, 0xa7, 0x66, 0x35, 0x48, 0x4d, 0x88, 0xa7, 0xe5, 0x2d, 0x74, 0xe3, 0x87, 0x28, 0x0e,
	0x9b, 0xe9, 0x66, 0xe8, 0x20, 0x59, 0x80, 0x71, 0x19, 0xdd, 0x68, 0x14, 0xe5, 0xe7, 0xa1, 0x80,
	0x3d, 0x2a, 0xde, 0x3f, 0x6a, 0x88, 0x2b, 0xb4, 0xfa, 0x10, 0x66, 0x7b, 0x04, 0x20, 0xe3, 0x10,
	0xdf, 0x67, 0x47, 0x92, 0x07, 0xfe, 0x93, 0xd3, 0x70, 0xa0, 0xd5, 0x5a, 0xcc, 0xa1, 0x01, 0x1f,
	0x56, 0x62, 0xb7, 0x15, 0x3a, 0x09, 0xa4, 0x03, 0x3f, 0xd2, 0x7b, 0xe3, 0x57, 0x57, 0x60, 0x54,
	0x96, 0xae, 0x6d, 0x66, 0x1e, 0xe8, 0x65, 0x46, 0x6a, 0x30, 0xd2, 0xd1, 0x4f, 0x26, 0x57, 0x42,
	0xaa, 0x5d, 0x48, 0xc3, 0x59, 0xed, 0x5e, 0x15, 0x69, 0xf6, 0xc7, 0x7f, 0xfb, 0xf6, 0xab, 0x18,
	0xa1, 0x23, 0xf9, 0x83, 0xeb, 0x79, 0xb7, 0x36, 0xae, 0x28, 0x8b, 0x64, 0x1f, 0x46, 0x78, 0xba,
	0xef, 0xbb, 0x1d, 0xf4, 0xb7, 0xbb, 0x7a, 0xf1, 0xc8, 0x42, 0x7d, 0xb3, 0xa7, 0x15, 0x9d, 0xc2,
	0x78, 0x63, 0xa4, 0x33, 0x1e, 0xd9, 0x03, 0x68, 0x37, 0xa7, 0xc9, 0x5b, 0x21, 0x19, 0xf6, 0xb7,
	0xae, 0x7b, 0x2d, 0x6a, 0x0e, 0x83, 0x4c, 0x93, 0xc9, 0x8e, 0x20, 0xf9, 0xcf, 0x78, 0x7d, 0x79,
	0x46, 0xaa, 0x30, 0xf2, 0xa4, 0x59, 0xf1, 0xd0, 0xd8, 0xdd, 0x53, 0xaf, 0x20, 0x39, 0x0c, 0x32,
	0xa3, 0x86, 0x06, 0xe1, 0x04, 0xfe, 0x10, 0xa0, 0xdd, 0x81, 0x0d, 0x5b, 0x53, 0xa0, 0x3f, 0xab,
	0x76, 0x29, 0x2b, 0x74, 0x09, 0x63, 0x5d, 0xa5, 0xd4, 0x17, 0xcb, 0x5b, 0xd2, 0x9f, 0xe5, 0xb1,
	0xea, 0xf0, 0xc8, 0x07, 0x90, 0xe6, 0x64, 0x3f, 0xc6, 0x2a, 0x74, 0x29, 0xdc, 0xa7, 0x37, 0x67,
	0x6a, 0x77, 0x13, 0xba, 0x88, 0xa1, 0xdf, 0x26, 0x11, 0x42, 0x93, 0x03, 0x18, 0x96, 0xdd, 0x5c,
	0x32, 0x1f, 0x9a, 0xc2, 0x28, 0x6b, 0xbd, 0x8e, 0x01, 0xdf, 0x25, 0xef, 0xf4, 0x0f, 0xe8, 0x64,
	0xd4, 0x04, 0x10, 0x19, 0xc5, 0xd0, 0x5d, 0x1c, 0x77, 0x0d, 0x78, 0x13, 0x03, 0x2e, 0xab, 0xd1,
	0x03, 0x72, 0x8e, 0x2d, 0xfc, 0x3b, 0x45, 0x1c, 0x63, 0xdc, 0xcd, 0xc3, 0x46, 0xd5, 0x20, 0xd9,
	0x60, 0x08, 0x61, 0xa1, 0x76, 0x1d, 0xe9, 0x4a, 0xb0, 0x7b, 0x22, 0x8a, 0xd8, 0x3a, 0xf7, 0xff,
	0x53, 0x05, 0xd2, 0x6e, 0x57, 0x95, 0xd0, 0x6e, 0x92, 0x6a, 0xf7, 0x3d, 0xd5, 0xf0, 0xde, 0x2f,
	0xbd, 0x8b, 0x41, 0x6f, 0xd3, 0xf7, 0xa3, 0xac, 0xd9, 0xbd, 0x15, 0x3c, 0xcb, 0xef, 0x19, 0x25,
	0x54, 0xd8, 0x4f, 0x14, 0x48, 0x71, 0x79, 0x6c, 0x1a, 0x25, 0x2b, 0x2c, 0xd7, 0x9d, 0xcd, 0xe4,
	0xb0, 0x6d, 0x24, 0x2d, 0xe8, 0x87, 0x88, 0xe4, 0x16, 0x39, 0x0d, 0x12, 0x0e, 0x23, 0x29, 0xfa,
	0xbc, 0x24, 0x17, 0x2a, 0xb8, 0xfe, 0x4c, 0xac, 0x61, 0xfc, 0x3b, 0x64, 0xe5, 0x14, 0xf1, 0x1d,
	0xfd, 0x3d, 0x57, 0x20, 0x2d, 0x04, 0xc8, 0x91, 0x84, 0x07, 0xea, 0x16, 0xff, 0x01, 0xc6, 0xff,
	0x58, 0x3d, 0x43, 0x7c, 0x9e, 0x90, 0x9f, 0x2b, 0x90, 0xf1, 0xf4, 0x23, 0x42, 0x8b, 0x75, 0xa0,
	0x5d, 0xa1, 0x76, 0x6b, 0x7a, 0xd2, 0x7b, 0x88, 0x6a, 0x85, 0xde, 0x1a, 0x10, 0x95, 0x38, 0x33,
	0x39, 0xa0, 0x97, 0x0a, 0x00, 0x4f, 0xb0, 0x38, 0x2f, 0xc3, 0xb4, 0xea, 0xef, 0xd9, 0xa9, 0xb3,
	0x3d, 0x6c, 0xe8, 0x47, 0x88, 0xe8, 0x03, 0x72, 0x3a, 0x44, 0xe4, 0xcf, 0x0a, 0x8c, 0x73, 0x3f,
	0x9e, 0x76, 0xa1, 0x45, 0x16, 0xba, 0x6d, 0xca, 0xc1, 0xa0, 0x6d, 0x23, 0xb4, 0xef, 0x91, 0xef,
	0x0c, 0x08, 0x4d, 0xde, 0xd2, 0xf3, 0x9f, 0x79, 0x3a, 0x8d, 0x2e, 0xe0, 0xdf, 0x2a, 0x30, 0x11,
	0xe8, 0xdc, 0x91, 0xc5, 0x20, 0x8e, 0x6e, 0xed, 0xbd, 0xde, 0x98, 0x65, 0x82, 0xd5, 0x33, 0x25,
	0x38, 0xe5, 0xf4, 0x77, 0xc2, 0x0e, 0x19, 0x5f, 0xef, 0xa7, 0xbb, 0xd6, 0xd6, 0x11, 0xca, 0x5d,
	0x72, 0xe7, 0x54, 0x50, 0x9c, 0x3d, 0xc8, 0x37, 0xc0, 0x3a, 0xab, 0x31, 0x67, 0x03, 0x44, 0x40,
	0x34, 0x1d, 0x68, 0x91, 0x3d, 0xa8, 0x37, 0xed, 0x23, 0x07, 0xd0, 0xe2, 0xd9, 0x00, 0xbd, 0x50,
	0x20, 0x23, 0x8a, 0x82, 0x00, 0xd4, 0x6d, 0xfd, 0xdd, 0x89, 0xd9, 0x40, 0x1c, 0xab, 0xea, 0x99,
	0x70, 0xf0, 0x54, 0x7d, 0xa1, 0xc0, 0x98, 0xd8, 0xfd, 0xee, 0x47, 0x4e, 0xd8, 0x7d, 0x24, 0xd0,
	0x36, 0x52, 0xfb, 0x7e, 0x26, 0x39, 0xa7, 0x35, 0xbd, 0xd2, 0x13, 0x63, 0xc5, 0x99, 0x24, 0xcf,
	0x8e, 0x74, 0x1b, 0xc7, 0x95, 0x1e, 0x21, 0xbc, 0x3b, 0x30, 0xd7, 0xc7, 0x8e, 0x2e, 0x23, 0x92,
	0x05, 0x12, 0x11, 0x09, 0xf9, 0x85, 0x82, 0xfd, 0x49, 0xcf, 0x57, 0x95, 0x15, 0x19, 0xcc, 0xa5,
	0x9e, 0x5f, 0x67, 0x08, 0x27, 0xda, 0x35, 0x46, 0xf3, 0x46, 0xff, 0xb5, 0x82, 0x77, 0x0a, 0x5f,
	0xeb, 0xee, 0x6a, 0xbf, 0x1c, 0x38, 0xa0, 0xfa, 0x27, 0x6b, 0x05, 0x31, 0xdd, 0x24, 0x37, 0xa2,
	0x51, 0xe4, 0xbd, 0x83, 0x90, 0xaf, 0x15, 0x98, 0x14, 0x72, 0xf6, 0xe1, 0xeb, 0x1b, 0x36, 0x02,
	0x30, 0x59, 0xdc, 0xd5, 0x53, 0x00, 0xe3, 0x8a, 0x3a, 0x14, 0x47, 0x8d, 0x6c, 0x6a, 0x85, 0x1c,
	0x35, 0xfe, 0x2e, 0x59, 0xd8, 0x75, 0x4c, 0xcc, 0xa6, 0xef, 0x22, 0x94, 0xcb, 0xe4, 0xad, 0xde,
	0x79, 0x13, 0xa1, 0x5e, 0xb8, 0xa7, 0x2e, 0xce, 0x3e, 0xcf, 0x5c, 0x49, 0x39, 0xd3, 0x28, 0x38,
	0xe4, 0x05, 0x80, 0x97, 0xe3, 0x73, 0xc7, 0xf1, 0x01, 0xe2, 0xb8, 0x4e, 0xf2, 0x11, 0x70, 0x74,
	0x08, 0xe6, 0x67, 0x6e, 0x41, 0x1e, 0x10, 0x53, 0xb7, 0xb2, 0x2c, 0x91, 0x2c, 0x0e, 0x8c, 0xe4,
	0x4b, 0x05, 0x32, 0xed, 0xb3, 0xdf, 0x0a, 0x2b, 0x7d, 0x81, 0x46, 0x60, 0xd8, 0x95, 0x55, 0xce,
	0x77, 0x2e, 0xcf, 0xe4, 0xff, 0x4e, 0x77, 0xde, 0x93, 0xaf, 0x14, 0x48, 0xbb, 0xdf, 0x0e, 0x3d,
	0xbe, 0x19, 0xfa, 0x27, 0x67, 0x13, 0x91, 0xac, 0x93, 0xb5, 0xd3, 0xde, 0x3c, 0x3c, 0x2c, 0xbd,
	0x54, 0xe0, 0x82, 0xc8, 0x57, 0x5f, 0x60, 0xdd, 0x32, 0x24, 0xe1, 0x2c, 0x9e, 0x07, 0x9c, 0x2f,
	0x15, 0xb8, 0x20, 0xb6, 0xd6, 0x39, 0xf0, 0xb4, 0x8a, 0xc0, 0x3e, 0xa4, 0xa7, 0xcc, 0x18, 0xdf,
	0x5f, 0x75, 0xd1, 0x0e, 0x71, 0x3a, 0x61, 0x16, 0xb9, 0x1c, 0xf2, 0x39, 0x19, 0x6c, 0x93, 0xa9,
	0x17, 0x7b, 0x9b, 0x75, 0x36, 0x44, 0xdc, 0xa6, 0x1b, 0x69, 0x41, 0xc6, 0xd3, 0x14, 0x0a, 0xbb,
	0xce, 0x07, 0x7b, 0x46, 0xea, 0xe5, 0x48, 0x9d, 0x31, 0x3a, 0x83, 0x21, 0x5f, 0x27, 0x13, 0x3c,
	0xa4, 0xf3, 0xa7, 0x4c, 0x7e, 0xbf, 0xa9, 0x5b, 0xa4, 0x00, 0x19, 0x57, 0x99, 0x8f, 0xaa, 0x61,
	0x97, 0x28, 0x5f, 0xa3, 0x37, 0x6c, 0x7d, 0xde, 0xde, 0x2e, 0x7d, 0x8d, 0x3c, 0xc2, 0xde, 0x8e,
	0xec, 0xea, 0x87, 0x1d, 0x17, 0x9d, 0xff, 0x0f, 0x84, 0x75, 0x90, 0x3c, 0x7f, 0x09, 0xd0, 0xd7,
	0xd6, 0xae, 0x7e, 0xf3, 0xea, 0xa2, 0xf2, 0xd7, 0x57, 0x17, 0x95, 0x7f, 0xbe, 0xba, 0xa8, 0x7c,
	0x32, 0x53, 0x36, 0x2a, 0xac, 0x63, 0x8a, 0xcc, 0xf0, 0x51, 0x29, 0x89, 0xfa, 0x7c, 0xff, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xb6, 0x09, 0x81, 0x16, 0x2c, 0x00, 0x00,
}
