// Code generated by go-bindata.
// sources:
// company.swagger.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _companySwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5d\x5b\x8f\xdb\xb8\x15\x7e\x9f\x5f\x41\xa8\x7d\x68\x81\xd9\x71\x9a\xbe\xa5\x4f\xd9\x5b\x90\x41\xb1\x1b\x6c\xb6\x58\xa0\x9d\xc0\xa1\xa5\x63\x9b\x89\x44\x2a\x24\x35\x53\x77\xe0\xff\x5e\x50\x17\x8b\x92\x65\x59\xb2\x44\x0f\x65\xf3\x61\x37\x1e\x89\xa4\x0e\xcf\xf9\xce\x8d\xd7\xe7\x1b\x84\x3c\xf1\x84\x57\x2b\xe0\xde\x1b\xe4\xbd\xbe\x7b\xe5\xdd\xaa\x67\x84\x2e\x99\xf7\x06\xa9\xf7\x08\x79\x92\xc8\x10\xd4\x7b\x9f\x45\x31\xa6\x9b\xbb\x98\x33\xc9\xd2\x92\x08\x79\x8f\xc0\x05\x61\x54\xbd\xcf\x7f\x22\xca\x24\x12\x20\xbd\x1b\x84\xb6\x69\x7b\xc2\x5f\x43\x04\xc2\x7b\x83\xfe\x93\x55\x5a\x4b\x19\x17\x0d\xa8\xdf\x42\x95\xfd\x94\x96\xf5\x19\x15\x49\xa5\x30\x8e\xe3\x90\xf8\x58\x12\x46\x67\x5f\x04\xa3\x65\xd9\x98\xb3\x20\xf1\x3b\x96\xc5\x72\x2d\xca\x4e\xcd\x1e\xff\x36\xcb\xfa\x43\xa0\x7c\x8c\x90\xb7\x02\xa9\xfd\x89\x90\xc7\x62\xe0\x69\x83\xef\x03\xd5\xc9\x7f\x12\x21\x7f\xd8\x55\xbc\x2d\xcb\x71\x10\x31\xa3\xa2\xd2\x5a\xfa\xe2\xf5\xab\x57\xb5\x47\x08\x79\x01\x08\x9f\x93\x58\xe6\xac\xd3\x1a\x4a\x5f\xa7\x1c\xc3\x7b\xd5\x10\xf2\xfe\xcc\x61\xa9\x6a\xfc\x69\x16\xc0\x92\x50\xa2\x5a\x10\x79\x57\x36\x19\x61\x1b\x45\xa3\x57\xa9\xb8\xbd\x69\xfa\xbd\xd5\xc8\x97\x78\x55\xf2\x31\x7f\x96\x37\xf7\x11\xf8\x23\xf1\xa1\x6c\xf1\xd3\x4d\xad\xbe\x17\x33\xd1\xce\xb6\x1f\x38\x60\x09\x79\x83\x96\xb2\xad\x2f\xcb\x62\xcc\x71\x04\x12\x78\x9d\x71\x35\xa2\x29\x8e\x52\xfd\x59\xb0\x60\x53\xa7\x98\xd0\x43\x6f\x38\x7c\x4b\x08\x07\xc5\x3d\xc9\x13\x18\xa9\xa7\xba\x18\x7e\x83\x6f\x09\x74\x43\xca\xa7\xa1\x48\xb9\xd1\x98\x57\x55\xbe\xd9\x73\x4e\xdb\x3c\x49\x48\xb0\x9d\xe1\x20\x22\xb4\x5d\x25\x45\x12\x45\x98\x6f\x54\x2f\xdf\x66\xa5\x6f\x5b\xf5\x75\xbf\x90\x0d\xa8\xcb\xa9\x32\x0c\x3a\x9d\xb9\xcd\xe0\x53\x96\xb1\x1f\xf8\xe4\x26\x4e\xdb\x16\x92\x13\xba\xaa\xd7\x5d\x32\x1e\x61\xa9\xbd\x37\x83\xa8\xbe\xb6\x27\x65\xb7\x6d\x18\xf8\x91\x70\xf0\x25\xe3\x9b\x9f\xa8\xe4\xc6\x0d\x90\x65\x58\xb8\x9d\x84\xc9\xac\x8a\xc8\x66\x9b\x39\x7b\x4e\x04\xf0\xec\x51\x9f\x90\xe6\x1d\x48\xa7\x1c\x13\x54\x8e\x9d\xb4\x2d\x20\xd7\x80\x5d\x0f\x20\x04\x09\xad\xc8\xfd\x31\x2d\x62\x17\x78\xd3\xec\x68\x91\x2c\x7f\x8a\x62\xe9\x40\xbb\x47\xf1\x65\x82\xb6\x87\xa9\x16\x82\xf9\x24\xc5\x70\xaf\xbc\x53\x19\x69\xbd\xaa\x2d\x70\x2f\x82\xd9\x92\xb6\x53\xb2\xcf\x89\xe3\xfe\x25\x80\x14\x14\xde\xb1\x0f\x8a\x76\x2e\xd5\x36\xfc\xec\x08\x73\xe8\xc9\xdb\x1b\x39\x27\xd2\x72\xe6\x46\x10\x34\xe6\x4c\xf6\xc3\xc5\x85\x86\x8d\x14\x5b\x90\x37\xfd\x02\x4f\xfd\xa5\xf4\x12\xf6\x73\x40\xda\x54\xeb\xa0\x53\x92\x49\x29\xc9\x65\x86\xa2\xa5\x0f\x48\xda\xf1\xfb\xaf\x38\xd0\x4d\xbc\x83\xb0\x83\xf0\x15\xb8\x25\xab\x7d\x92\x04\x1c\xf5\x9e\x8d\xfc\x3d\xad\x64\x99\xe2\x2a\xa2\x5c\x28\x9f\xb7\x67\x2e\x94\x97\x75\xd9\x37\x86\xf1\x4a\x18\x36\x02\xe4\xca\xc0\x31\x0d\x03\x59\x42\xc6\xce\xb9\x8e\x14\xf2\xb3\x67\xf5\x4f\xfe\xe4\x0b\x5b\xf4\x36\x9a\xf7\xaa\x8e\x65\x2a\x71\xcf\x16\x57\x68\x32\x3b\x68\xc5\x4e\xd6\x16\x90\x7b\x16\x0b\xdf\x68\xc5\xef\xd9\xc2\x42\xc4\x3a\xb4\xd6\x29\xb6\x09\xad\x53\x72\x39\xf7\x6c\x31\x25\x8f\x33\x7b\x3e\x65\xc4\xc8\x29\xf1\x34\xb4\x62\x62\x4a\x6c\x09\xa5\x26\x9c\x63\xa7\x51\x2c\xa7\x56\x16\x48\xdf\xa9\xd5\x55\x7b\xf1\x8e\x80\x7f\x51\xc7\x2d\xd6\x64\x29\x7b\x27\x8b\x1f\xb3\x5a\x96\x19\x98\x94\x2a\x97\x30\x36\x51\x6c\x93\x99\x31\xe1\x13\xbb\x25\x8c\x29\x40\xac\x44\xad\x43\x6c\x9d\x62\x9b\x10\x3b\x0d\x77\xa3\x61\xfc\x9c\x69\x63\xe7\xc0\xf4\xfb\x24\xfc\xfa\x21\x59\x84\x44\xac\x9d\xff\x70\xda\x78\xe1\xda\xb8\x87\xf6\xa9\x0c\xe5\x64\x11\xe1\x69\x83\x39\xce\xc1\x4e\x47\x47\x26\xa6\xd2\x96\x50\x6a\xc0\x6f\x76\xde\xd6\x61\x97\x76\xb9\x6d\x1d\xad\x14\x3b\xf5\xb2\x44\xbd\xba\x8d\x97\xda\xa5\x5b\xce\x73\xb5\x51\xec\x54\xeb\x72\xc3\xe6\xce\x90\x7f\xd1\x18\xf9\x89\xf1\xaf\x99\x82\x1d\x8e\x8e\xb5\x45\x69\x7f\xe4\xc5\x6f\x0f\x1a\x21\x95\x75\x36\x94\xb2\xc1\x08\x15\x64\x39\x33\x54\xa3\xd8\x26\x33\x64\xc2\x6f\x76\x1b\x53\xcd\xe0\x61\x1b\x68\xdd\x32\xf9\x76\x8a\x6d\xc2\xee\x34\x1c\x53\x8e\xf3\x89\x78\xa6\x01\x5b\xb8\x9c\x42\x3b\x85\xbe\xaa\x6d\x3a\x06\x7c\x67\xe7\x21\x1d\xcb\x94\xcd\x8d\xe9\xb4\x52\xec\x94\xcc\x02\x25\x1b\xc5\x3b\x66\x3f\x06\xad\x81\xc9\x54\xd7\xcd\x64\x3a\x1d\x36\x49\xae\x06\x54\x0b\x08\x7e\x41\x2d\x3e\x25\x94\x75\xdb\xfc\xac\x40\xcd\x74\xc6\x48\x0d\x84\x82\xdd\xa6\x1f\x1c\x52\xad\x90\xff\x74\x90\x3a\x8d\x41\x93\xae\x10\x32\xea\x4e\xca\x91\x90\xd4\x97\x54\xce\x72\xef\x33\x24\xa2\x3a\xf3\x5e\x55\xb6\x4c\x4f\xbb\x8f\x4c\x0d\xd1\xd4\xeb\x4b\x26\x4e\x89\x38\xae\xfb\x3c\xf7\x8b\x83\x47\x4f\x2f\xee\xa4\x6f\x81\xf4\xa7\xe1\x19\x7b\xc8\x64\x7c\x23\x47\xa8\x04\x4e\x71\x38\xfb\x1a\x93\xce\x93\xd8\x2b\xce\x9e\xe4\x1a\xad\x38\x8e\xd7\x2d\x33\xd9\xef\xd2\x62\xef\xea\xa5\x6c\xd0\x03\x8d\xb4\xdf\x72\x72\xfa\xea\xc4\x38\xfc\x97\x24\x82\xff\x31\x7a\xe4\x9e\x15\xfd\x54\x9b\x5d\x85\xc3\x8c\x4f\x4f\x3e\x22\x11\xfc\xbb\x5e\xce\x06\xd6\x17\x84\x9d\xed\x22\x96\x9b\xe2\xff\xd9\x85\x3b\x1a\x49\x3b\xda\x3d\xfd\xda\x09\x45\x58\xb1\x42\x5b\x13\x4a\x61\x87\xd8\xe2\x0b\xf8\xe5\xfa\x30\x2f\xe6\x8a\xfb\x92\xd4\x98\x5a\xcd\x67\x6a\xec\x6e\xb1\x69\x2d\x16\x6d\xbb\xe7\x8b\x76\xd7\x0f\x61\xed\xbe\x8c\x02\x5e\x7a\x9f\x7e\x5d\xa6\xec\x1e\xd0\x9d\x32\xe8\x1b\xa7\x2f\xb7\x75\x4e\xd5\xbf\xa8\x35\x8d\x39\xc7\x55\x5b\xec\x11\x09\x51\xbd\xfc\x09\x86\x76\xbb\xcf\xdc\x16\x1e\x8e\x80\x8a\xb1\xd9\x78\x94\x6a\x61\x19\x86\x35\xb9\xef\xdd\x66\x63\x42\xe8\x87\x67\x8b\xbb\xca\xbe\x3c\xbd\x7b\x08\x2b\xb1\xef\xb3\x84\xca\x7a\x6f\x4f\xa2\xbd\x62\x12\x6b\xc7\xe2\x99\xe0\x61\x3d\x77\x6f\x36\xce\xa9\x38\x0f\x51\xb2\x60\x2c\x04\x4c\x0f\xc1\xa4\x78\xdd\x5b\x24\x43\xcd\x5a\x2e\x16\xd3\x1c\xd4\x41\x74\x94\x91\x21\x89\xc8\x1e\x50\x0a\x82\x54\xc0\xb6\xaa\xcc\x13\x57\x18\x49\xa8\xfc\xfb\xeb\x66\xa4\xb0\xe5\x52\xc0\x58\xed\xb6\x89\xe7\xe0\x7e\x27\x6b\x2d\x51\x39\x13\x34\x7a\xd3\x06\xfd\xe6\x17\xb6\x30\xd4\x72\x3a\x0d\x3a\x17\x12\x73\x39\xc7\x4b\x99\x5e\x81\x78\xc2\x27\x54\x22\xfc\x9d\x0a\x58\x8f\x7f\x65\x01\x4b\xc6\xc1\xc8\x67\xe2\x0c\x8a\x70\x90\x4f\xa3\xda\xa6\x22\xc8\x18\x12\x23\x18\x91\x69\x9e\xf1\x8e\xed\xc3\xb9\xbf\x26\x8f\x23\xf2\x56\x6b\x3b\x80\x25\x4e\x42\x39\x2f\x52\x9e\xf1\xa9\x2f\xbe\x10\xe0\xcd\xfc\x09\xe0\x6b\x06\xc6\x83\xce\x60\xc4\xd8\x4c\xbf\x8d\x72\xb0\x59\x7c\xe9\xd0\xf9\x82\x7c\x97\x26\x97\x11\xbc\xd6\xa8\x64\x1b\xe2\x72\x2b\x37\x9a\xae\xc4\x1c\xc0\x0f\x33\x36\xe8\xa2\xed\x44\xfd\xf8\xbf\x6b\x8c\xa1\xcc\xc0\xc6\x67\x21\x3b\x31\xb0\x39\x41\x84\x95\xc3\x38\xae\x51\x88\xa9\xca\x98\x89\x23\x25\x8b\x8d\x34\x3c\xc9\xd8\xfd\xcc\xe1\xee\xde\x89\xd8\xd6\x62\xdb\x8c\x15\x31\xe8\x74\x8c\x38\x9b\x17\x30\x80\xb5\x61\x2c\x8b\x46\x4f\x35\x66\x14\x13\x61\x73\x73\x23\xdc\xd6\x02\xbb\xf2\x76\x37\xa7\xe0\xb3\x88\xd0\x15\x5a\x72\x16\xa1\x62\xf4\xb2\xf1\xfb\x10\x61\x12\x9a\x60\x1a\x5d\x12\x1e\x41\x30\xc7\x34\x98\x63\x5f\x92\xc7\x83\xdd\x1c\x92\x66\xc6\x6b\x46\x81\x26\xd1\xe2\xd4\x61\x8e\x56\x6b\xbc\x66\x92\xcd\x13\x3e\x16\x7f\x6e\x6a\x9f\x28\xc5\x55\xde\x79\x78\x5c\x07\xad\xb7\xd5\xe7\x9c\x26\xa9\x5e\xaf\x68\xff\x58\x72\xa7\x19\x8d\x0b\x4a\xc9\x2b\xf2\xb1\x1e\xb9\x53\xe7\x76\xb9\x72\x6d\x8c\xd9\xce\xf3\x68\x70\x76\x76\xbc\x5d\xf4\x9e\xcd\xfb\x8f\x9d\xb2\x1d\x61\xf4\x58\x79\xec\x34\x98\x61\x56\x8a\x47\x58\x3d\x89\xac\xea\x5c\xec\xd0\x17\x6c\x1d\x63\xc9\xd1\x06\xf2\x15\x5f\x03\x98\x1a\x03\x8b\x43\x98\x0b\x7f\x0d\x41\x12\x42\x30\x8f\x81\xa7\xd9\xda\x21\x5e\xd4\x1a\x4e\xdf\xe1\x20\x48\x5d\x3b\x0e\x3f\x34\x7f\x06\x1d\x33\xf2\x6d\x66\xfe\xe0\x62\xce\x8c\x74\x46\xe7\x7b\xbb\x1d\x8f\x7e\xef\x44\xa7\x72\xcf\x16\xf6\xd9\x8a\x69\x99\x65\xe3\x03\x19\x26\x67\xf2\xce\x35\xd2\x50\xdc\x12\x36\x00\x6b\xb5\x0b\xd3\x90\x81\x00\xbe\x76\x19\x40\xc7\x75\x48\x79\xdf\xac\x77\x08\xe7\x8c\x47\xf6\xef\xd1\xb6\x96\x2d\x66\x94\xd6\xd0\xd0\x8b\xd1\x21\x91\xf1\x47\xda\xda\x20\x92\x9d\x22\xe7\x9c\xcf\x58\x4d\xbb\x69\x9c\x4b\x9c\xc6\x29\x4f\x89\x18\xa0\x29\xed\xe1\xe4\x48\xce\x73\xef\x54\xc8\xe6\x20\x77\xfa\x2b\xd8\x3a\x89\xeb\xea\xa2\x81\xa9\xab\xf5\x48\xb8\xec\xfa\x89\x21\xa0\xec\xe5\x66\xd3\x25\xe2\x57\xe6\x65\xa7\x97\x87\xb9\xc9\x6a\xd4\x05\xc8\x43\x1d\xe1\x0b\xef\xc9\xe8\xd2\x3d\x3b\x1d\x47\x2b\xe5\xfa\xbe\xc1\x21\xc2\x69\xd8\x71\x79\xa2\x80\x5a\x7a\xd9\x79\x63\x7a\xe7\x3e\x9f\x36\xec\x99\x9f\x08\x61\x97\x98\xa7\x19\x1f\xb4\x09\x2a\x63\xb3\xbd\x8a\x75\x86\xf1\x99\x5d\xb7\x76\x2b\x12\x9e\xf4\xe3\xc2\x1b\x19\x66\xf5\xb6\x54\x8b\xad\x78\xc1\xbd\x89\x6d\x48\xd5\xce\x49\xbc\x4a\x55\xd1\x9a\xd6\x0f\xf3\xb3\x35\xc9\xb0\x34\xf9\xfd\x63\xff\xc6\x85\x2b\x83\x8d\x15\x2b\x8c\x1a\x45\x54\x3d\x35\xb8\x83\x84\x6a\x67\x4c\x88\xec\x14\x07\xf4\x33\x63\xe8\xf9\x81\x66\x85\x78\xec\xa3\xef\x31\xff\xcb\x8a\xb1\x55\x08\x77\xc5\x37\xee\xd2\x8f\xfc\x15\x71\x90\x09\xa7\x02\x1d\x78\xff\x8f\xac\x99\xed\x03\x7d\xa0\xbf\xaf\x01\xdd\x7f\xfc\xf5\x17\xc4\x21\xe6\x20\x80\xca\x74\x4b\x2e\x5a\x32\x8e\x3e\xa7\xc5\x3f\x23\x22\x10\xa8\x5f\x59\xc1\x8c\x5e\xf4\xf9\x79\xfb\xf9\xce\xdb\x77\x71\x6f\xd1\x0a\x28\x70\xe2\xe7\x75\x22\x10\x02\xaf\x00\xc9\x35\x96\x68\xc3\x12\xe4\x63\x8a\x38\x7c\x97\x08\x40\x92\x21\xfc\xc8\x48\x80\x32\x8e\xd3\x15\x0a\x92\x38\x24\x3e\x96\x10\x3c\xd0\x4a\x7d\x81\x08\x55\xd5\x39\x7a\xfb\xe1\xbd\xb8\x43\x6f\x91\xdc\xc4\xc4\xc7\x21\x82\xff\xe2\x28\x0e\x41\x51\x29\x19\x52\xcd\x12\x89\xb0\x40\x72\x0d\x88\x67\xf6\xf4\x81\x32\x9e\xff\x9d\xcd\x73\xab\xca\x80\xd8\x12\x61\xaa\xda\x43\x11\xc8\x35\x0b\xee\xd0\xcf\x8c\x23\x42\x85\xc4\xd4\x87\x37\xb9\x97\xbe\x51\xff\x6d\x6f\xfe\x1f\x00\x00\xff\xff\x61\xf1\x05\x62\xff\xaa\x00\x00")

func companySwaggerJSONBytes() ([]byte, error) {
	return bindataRead(
		_companySwaggerJSON,
		"company.swagger.json",
	)
}

func companySwaggerJSON() (*asset, error) {
	bytes, err := companySwaggerJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company.swagger.json", size: 43775, mode: os.FileMode(420), modTime: time.Unix(1481926062, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"company.swagger.json": companySwaggerJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"company.swagger.json": {companySwaggerJSON, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
