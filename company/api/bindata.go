// Code generated by go-bindata.
// sources:
// company.swagger.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _companySwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5d\x8f\x9c\x36\x17\xbe\x9f\x5f\x81\x78\xdf\xcb\x6d\x26\x4d\xef\x72\xd7\x26\x55\x94\x55\xd5\x46\x49\xab\x48\xad\xa2\x91\x07\x0e\x33\xde\x05\x4c\x8c\xd9\xd5\x74\xb5\xff\xbd\xc2\xc0\x60\x3e\xc7\xc0\x30\xd8\xb3\x8e\x14\x65\x32\xd8\x9e\xe3\x73\x9e\xf3\x69\x63\x3f\xad\x2c\xcb\x8e\x1f\xd1\x6e\x07\xd4\x7e\x6b\xd9\x6f\x5e\xbd\xb6\x6f\xd2\xef\x70\xe8\x11\xfb\xad\x95\x3e\xb7\x2c\x9b\x61\xe6\x43\xfa\xdc\x21\x41\x84\xc2\xc3\xab\x88\x12\x46\x78\x4b\xcb\xb2\x1f\x80\xc6\x98\x84\xe9\xf3\xfc\xa3\x15\x12\x66\xc5\xc0\xec\x95\x65\x3d\xf3\xf1\x62\x67\x0f\x01\xc4\xf6\x5b\xeb\x9f\xac\xd3\x9e\xb1\xa8\x18\x20\xfd\x1c\xa7\x6d\xbf\xf1\xb6\x0e\x09\xe3\xa4\xd2\x18\x45\x91\x8f\x1d\xc4\x30\x09\xd7\x77\x31\x09\xcb\xb6\x11\x25\x6e\xe2\x48\xb6\x45\x6c\x1f\x97\x93\x5a\x3f\xfc\xb8\xce\xe6\x83\xa1\xfc\xda\xb2\xec\x1d\x30\xe1\xbf\x96\x65\x93\x08\x28\x1f\xf0\xa3\x9b\x4e\xf2\x37\x1c\xb3\x77\xc7\x8e\x37\x65\x3b\x0a\x71\x44\xc2\xb8\x32\x1a\x7f\xf0\xe6\xf5\xeb\xda\x57\x96\x65\xbb\x10\x3b\x14\x47\x2c\x67\xdd\xcf\x56\x9c\x38\x0e\xc4\xb1\x97\xf8\x56\x31\xd2\x2b\x61\x78\xde\x89\xf3\x11\x35\x06\xb3\x2c\xfb\xff\x14\xbc\x74\x9c\xff\xad\x5d\xf0\x70\x88\xd3\x71\xe3\x7c\x82\x87\x8c\xdc\x43\x4a\xb9\x5d\xe9\xf8\xbc\x6a\xfb\xfc\x2c\x4c\x2a\x42\x14\x05\xc0\x80\x96\x3c\xce\xfe\xd4\xa6\x13\xa2\x80\x43\x84\x78\x5e\x2a\xf9\x1a\xdd\x98\xcf\xf1\x7b\x02\xf4\x50\x7f\x44\xe1\x7b\x82\x29\xa4\xac\xf5\x90\x1f\x43\xed\x31\x3b\x44\x7c\x5c\x1c\x32\x48\x51\x5a\x7b\xec\x11\x1a\x20\x96\x37\xf8\xe9\x8d\x38\xbb\xe7\x9b\xd3\xd4\xfa\x38\xc0\x6a\x10\x7b\xfc\xfc\x4d\x60\x3e\x43\xbb\x3a\xdb\xed\x5c\x96\x5f\x80\x3e\x60\x07\xca\x31\xbe\xad\x6a\xd3\xb6\x23\x12\xf7\x23\xf9\x1d\x05\xc4\x20\x1f\x50\x2b\x24\xcf\x8d\xe2\x2d\x71\x1b\xb2\xcf\x60\xd1\xf6\x44\x40\x05\xa3\x49\x1d\x14\x63\x67\x2a\x0a\xe7\x33\x7c\x4f\x40\x4e\x79\x27\xe3\x67\x25\x30\xaf\x6a\x25\xd7\x4f\x39\x6d\x9b\x24\xc1\xee\xf3\x1a\xb9\x01\x0e\xfb\x6d\x67\x9c\x04\x01\xa2\x07\x8e\x8b\xac\xf5\x4d\xaf\x61\x6d\x36\x52\x17\x8b\x39\xad\x33\x43\x51\x64\x79\x3b\x24\x53\xc7\x36\x0c\x92\x85\x9d\x8a\x19\xc5\xe1\x4e\x11\x3b\xc4\xd9\xa9\x87\xe4\xdf\x63\x0a\x0e\x23\xf4\xf0\x6b\xc8\xe8\xec\xc6\xe8\xc2\x08\x90\x70\x9b\x0a\x98\xc7\xaa\x08\x54\xb6\x8f\xeb\xa7\x24\x06\x9a\x7d\x35\x24\xce\xfc\x00\xcc\xa8\x84\x36\x2a\x71\x94\xb1\x9e\x36\xda\x05\x1f\x18\xf4\xe2\xf1\x3d\x6f\xa2\x16\x24\x23\x9a\x12\xc9\xf2\x0c\xee\xd9\xa0\x6e\x46\x72\x16\xb1\xa0\x71\x4c\x1c\xcc\x41\x38\x28\x47\x4f\x6d\xa7\xd8\x55\x15\xbc\xf6\xc7\x93\x25\xc5\x97\xc8\xd4\xd5\x43\xb3\x3a\xd9\xb8\x04\xb1\x0a\x15\x3a\x96\xd0\x4c\xb7\xf0\xf7\x43\xd4\xf2\x18\x24\xe8\xa1\x90\x47\x72\x8d\x3a\xd6\x48\x31\xea\xb8\x74\x29\x4f\x28\xac\xb4\x6a\x55\x6b\x8a\xad\xab\xfe\xbd\xd0\x9c\x42\x81\x34\xfb\x77\x78\x1c\x2e\x85\x25\xdc\xd0\x84\x2c\xbb\x36\x41\xa3\x1a\xc7\x76\xea\xaa\x86\x9e\x89\x4f\x69\xcf\x93\x7e\x54\xfe\x15\xb9\xa2\xb9\x36\xc0\x34\xc0\xd4\xd6\x85\x28\xed\x3f\x18\xa0\x60\xf0\xea\xff\x9f\xbc\x93\x16\xea\x98\x92\x7a\x85\xd9\xcb\xa5\x43\x6c\x56\x97\x78\x6b\x78\x9d\x32\x5b\x1f\x58\x5c\x19\x24\xf4\x30\x86\x25\x50\xd4\x5c\xb2\xe2\x40\x5f\x3f\xa5\xff\xe4\xdf\xdc\x91\xed\x60\x03\x79\x9b\xf6\xd1\x42\x11\x6e\xc9\xf6\x0a\xcd\xa3\x84\x2e\x1c\x25\x7c\x2d\xd6\xba\xd5\x22\xdf\x92\xad\x36\x38\x34\x18\x5c\x98\x1c\x65\xdc\xc3\x2d\xd9\xea\xe4\x1d\xd6\x4f\x63\xaa\x2e\x46\x35\x8d\x6a\x4a\x93\xa3\xb1\xa3\x92\xaa\xf4\x18\x65\x30\xca\x20\x4d\x8e\x3a\x94\x28\xe0\x31\x25\x01\xb9\xa8\x93\x8c\xf7\xd8\x63\x83\x93\xa8\x2f\x59\x2f\x2d\xcc\x02\xa7\xd5\x24\x52\x0a\x90\x73\xa2\xfe\x3c\x65\x29\x7c\x1c\x41\x77\x64\xab\x14\x3d\x5c\x19\x37\x31\x43\x94\x6d\x90\xc7\x9a\x4b\xfb\x2a\x10\xb6\x05\x8f\x50\xb8\x08\x65\x73\xc4\x3c\x72\xc9\x39\x37\x1a\x1a\xd9\x37\x63\xdb\x16\x26\x47\x81\x70\x43\x40\xee\x25\x53\x74\xe9\x74\xe2\x97\xc4\xbf\xff\x94\x6c\x7d\x1c\xef\x4d\xfc\x20\xfc\xba\xd1\x31\x7d\x74\xac\x81\x61\x5d\x8a\x61\x59\x9c\x3f\xae\x1c\x66\x9c\x61\xd6\xce\x28\xaa\x5a\x55\x80\x19\x7c\x98\xf4\xbb\x46\x6a\xe9\xc4\x4b\x7f\xd7\xc8\xe0\xbf\x6c\x7f\x81\x92\xb0\x5a\xe0\x37\x0e\xa1\x49\xd1\xcb\x54\x08\x3d\x62\x48\x69\x48\x2e\x1a\x30\x3e\x12\x7a\x9f\x29\x40\x77\xa8\x28\xec\x42\xfb\x9a\x37\xbf\xe9\x34\x1d\x69\x0a\xd5\xd2\x4a\x5d\xd3\x51\x10\x6b\x8c\xc7\x8c\xe4\xcc\xe1\xc3\xe4\x4a\x7c\x99\x78\xf5\x80\xe2\x4b\xdf\xb9\xae\x98\x3b\x53\xc0\x89\xe4\xe8\xd5\xc4\x8b\x4c\x78\x03\xca\xa8\xa9\x51\x53\x0d\xde\x77\x99\xc1\x8f\x49\xd7\x22\x14\x53\x11\x53\x8c\x30\x5a\xa0\x86\xd3\xc9\x3e\x4c\xda\xe9\x92\xe9\x96\x59\xaf\x12\x7e\xdd\x68\x9e\x24\x39\x02\xfc\xd4\x20\xe8\x72\xfb\x4b\x6a\x4f\xcb\x23\x29\x5c\xc4\xe0\x07\x86\x03\x50\x78\x0b\xca\x40\xe2\x17\x34\x7a\x63\x02\x6a\xf3\x26\xa0\xda\x46\x4c\x3b\x57\x3d\x70\xf1\xc0\xe0\xcf\xe0\x4f\x9b\x32\x8b\x2c\x04\x66\x35\xfd\x65\xed\x84\xdb\xfd\xca\x05\x08\x43\x8a\x28\xe9\x64\x3e\xa6\x9d\xb5\xd0\x3e\xf9\x0a\xd7\x14\xfd\x53\xec\x4c\x8c\xd3\xe6\xe0\xf2\x9b\x7f\x4f\x44\xd5\xca\xee\xf9\xed\x55\xa9\x11\x81\x93\xb9\x8c\xa0\xfc\xed\x97\x12\xac\x18\x99\x97\xbf\x6d\x02\x84\x69\x3c\x3f\xbf\x41\xc3\x21\x03\x1a\x22\x7f\x7d\x1f\x61\xe9\x95\xfa\x1d\x25\x8f\x6c\x6f\xed\x28\x8a\xf6\x3d\xcb\xf5\x1f\x78\xb3\x0f\xf5\x56\xea\xa2\x5f\x20\xf8\x73\x3e\xf4\x50\x4d\x38\x8f\x54\x18\x0e\xe0\x5f\x12\x9e\xb8\xb9\x49\x3c\xc1\xe7\xd8\xa1\x5b\x1c\xfc\x6c\x27\x1c\xc0\xdf\xf5\x76\xea\x0a\xa4\x20\x77\x4c\x2d\x72\x82\x24\x8e\x17\x7b\x09\x24\x1d\x69\xb7\xc5\xfb\x51\xfe\xf0\x38\x69\x82\x94\x0a\x73\x44\xb6\x77\xe0\x94\x3b\xdc\x6a\x4b\x1a\x25\x99\x65\xf4\x58\x63\x7e\x97\x5d\x13\xe7\xd8\x76\xc3\x57\xa5\x33\xa2\x14\x55\xad\x98\x8d\x19\x04\xf5\xf6\x23\x4c\x94\xc0\xf4\x56\x18\x57\x6f\x91\x99\xc0\xa0\x4a\x3c\x3b\x82\x47\x8d\x6b\x7c\xe6\x60\x50\xf7\xb2\xad\x2c\x9f\xca\xd3\xd1\xa7\x30\x0b\x39\x0e\x49\x42\x56\x9f\xed\x28\xda\x2b\xca\x54\x3b\x48\x6e\x0e\x1e\xd6\x13\xe5\x76\xb5\xe6\xe2\xec\xa2\x64\x4b\x88\x0f\x28\xac\xd2\x52\x16\x5f\x8b\xc7\x83\x45\x32\x55\xc9\x73\xb1\xcc\xcd\x41\x11\x44\x27\x19\x99\x9d\x7f\xdd\x41\x50\xdb\xb9\xd0\xdd\xa7\x42\x8b\xc3\xe6\x27\x55\x9f\x67\xdc\x3e\xf1\x74\xbe\x47\xb3\xa0\xad\x29\xf3\xdc\x11\x9d\x27\x79\x82\xe3\x7b\xc8\x23\xfa\x36\xd7\x74\xfa\x07\xe9\x10\x5e\xcb\xd2\x46\xd7\xaf\xe4\xab\x2f\x73\xfc\x4c\x94\x41\x02\x3a\x39\x71\x56\x1b\x51\x38\xc6\x29\x01\xc0\x48\xa9\xe5\x19\xcc\x70\x7f\x48\x9d\x3d\x7e\x38\x23\x7f\x84\xb1\x5d\xf0\x50\xe2\xb3\x4d\x11\x8e\x8e\xa1\xaf\x18\xc3\x45\x87\xcd\x23\xc0\x7d\x06\x99\x4e\xd3\xd9\x18\x4a\x42\x5c\x53\xcd\xb9\x1a\x61\xd7\x15\xd9\xf2\xd6\xdb\x20\x27\x08\x68\xac\x6e\x28\x8f\xdf\xfa\x01\x6a\xba\xfa\xba\xb1\x02\x72\x88\x4f\x4e\xb9\xa7\x21\xac\xac\xbc\xea\xae\x2b\x33\x39\xc0\xe6\xf1\xd9\x8c\x44\xb3\x0c\xbc\x58\xac\x73\xe1\xf0\xa0\x71\x1e\xee\x82\x18\x1b\xab\x73\x93\x8c\xe1\x48\x23\x38\x8b\xca\xd7\x12\xdd\xa5\x8a\x36\x45\xc9\x75\x33\xa5\xe6\x33\x2b\x0c\x2a\xd8\x17\xaf\xc7\xc7\xe1\xce\xf2\x28\x09\xac\xa2\xce\xd0\xfa\x0b\x10\x20\xec\x8f\x9b\x5a\xe8\x61\x1a\x80\xbb\x41\xa1\xbb\x41\x0e\xc3\x0f\x9d\xa4\x4e\x09\x53\xa3\x3d\x09\x21\x4c\x82\xed\xc9\x54\xa7\xab\x3b\x23\x9b\x84\xca\xcf\x71\x55\x1b\xa4\x64\x6a\x79\xd1\xd8\x69\xc4\x2a\x60\x43\x86\x03\x5f\x4a\x21\x35\xa9\xaf\x48\x55\xf9\xae\x28\x2c\x6f\x5b\x0f\x99\x20\xa5\x08\x48\xe4\xc3\x26\x76\xf6\xe0\x26\x3e\xb8\x9b\x08\x28\xf7\x0e\x5d\x53\xa9\x0d\x9c\x89\xda\x75\xb9\x50\x90\xff\xa9\xfd\x67\x4e\x32\x43\xf6\x7e\xb3\x8a\xca\x67\xa4\x93\x70\xd3\xd8\x03\x3e\x17\xf3\x6f\xc9\x76\x89\xb2\x82\x96\x69\xc1\x9c\x35\x8d\xf3\xc5\x1f\xc5\x69\xfc\x13\xa4\x5a\xbb\xae\xc0\x9a\xc1\xc8\xd5\x8e\x1c\x95\x5c\xbf\x68\xde\xa4\xa6\x61\xa4\x3b\x3a\x70\x99\x18\x50\x8c\x89\x08\xfb\x84\x91\x1d\x0f\xf0\xd2\x8c\x87\x49\x83\xe5\xfb\x5e\x36\x0d\x2e\xdf\x27\x9a\x80\xc9\x7e\xc7\x7b\x26\xe3\xd7\x38\x58\xa3\x3d\x1c\xd0\x7f\xc5\xa4\x4f\x5c\x7c\x21\x56\x43\xeb\xa1\x62\xf4\x70\x35\xc5\x93\xe3\x55\x6b\x13\x80\xb1\xf0\x2e\x82\xde\xe9\x89\x3b\x8d\xa6\x4c\xb1\x65\xe7\xd6\xc8\x69\xca\x6c\x66\xed\x9d\x53\xbe\xfd\x5d\xd7\xb2\xf6\x79\x6b\x0d\x19\x33\x16\xde\xaf\xa5\xb0\x02\x7c\x6d\x1e\xd6\xa4\x15\x5a\x9a\x87\x4d\xcd\xc1\xdc\x11\xfb\xbc\x56\xe9\xdf\xe7\xd5\x7f\x01\x00\x00\xff\xff\x16\x79\x6c\xb4\x8d\x94\x00\x00")

func companySwaggerJSONBytes() ([]byte, error) {
	return bindataRead(
		_companySwaggerJSON,
		"company.swagger.json",
	)
}

func companySwaggerJSON() (*asset, error) {
	bytes, err := companySwaggerJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "company.swagger.json", size: 38029, mode: os.FileMode(511), modTime: time.Unix(1562394264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"company.swagger.json": companySwaggerJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"company.swagger.json": {companySwaggerJSON, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
