// Code generated by go-bindata.
// sources:
// account.swagger.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _accountSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x5f\x6f\xdb\x46\x0c\x7f\xf7\xa7\x20\xb4\x3d\x6c\x40\x6b\x67\xd9\x5b\xf6\x94\x16\x69\xd1\x61\x58\x83\xa5\xdd\xcb\x12\x24\xe7\x13\x25\x5d\x67\x1d\xaf\x3c\xca\x9d\x11\xf8\xbb\x0f\x27\xc9\x95\xac\xca\xae\xd3\xc8\x86\x8b\xf6\xc9\xb2\x8e\xe4\x91\x3f\xfe\xc8\xfb\xa3\xfb\x11\x40\xe4\x3f\xa8\x34\x45\x8e\xce\x20\x3a\x1d\x9f\x44\x4f\xc2\x3b\x63\x13\x8a\xce\x20\x8c\x03\x44\x62\x64\x86\x61\x5c\x69\x4d\x85\x95\xb1\x63\x12\x2a\x25\x01\xa2\x39\xb2\x37\x64\xc3\x78\xfd\x08\x96\x04\x3c\x4a\x34\x02\x58\x96\xf6\xbc\xce\x30\x47\x1f\x9d\xc1\x3f\x95\x52\x26\xe2\x56\x06\xc2\xb3\x0f\xb2\x37\xa5\xac\x26\xeb\x8b\x35\x61\xe5\xdc\xcc\x68\x25\x86\xec\xe4\x9d\x27\xdb\xc8\x3a\xa6\xb8\xd0\x3b\xca\x2a\xc9\x7c\x13\xd4\x64\xfe\xcb\xa4\x8e\xa7\x79\x0b\x10\xa5\x28\xad\xbf\x00\x11\x39\xe4\xd2\xde\xab\x38\xc4\xf8\x87\xf1\x52\x7b\x5e\x0e\x33\x7a\x47\xd6\xa3\x5f\xd3\x02\x88\x4e\x4f\x4e\x3a\xaf\x00\xa2\x18\xbd\x66\xe3\xa4\x06\xac\x65\xa8\x1c\x2e\x71\x52\x9f\xa8\x01\x44\x3f\x32\x26\x41\xe3\x87\x49\x8c\x89\xb1\x26\x58\xf0\xab\x00\xce\xab\x9f\xd2\xb5\x35\xc5\xe5\xa8\xef\x79\xd9\x72\x5f\x54\xda\xa0\x57\xbf\xab\xcd\x5d\x21\xcf\x8d\xc6\xc6\xe2\xcd\xa8\xa3\x1f\x39\xf2\xdb\xd1\x7a\xce\xa8\x04\x8f\x14\xaf\x87\x62\xe5\x14\xab\x1c\x05\xb9\x8b\x58\xc7\x69\xab\xf2\xb2\x5c\xa6\x14\x2f\xba\x1e\x1b\xbb\x69\x84\xf1\x7d\x61\x18\x03\x6c\xc2\x05\x0e\x13\x69\x85\x7f\x1d\xef\x5f\xf8\xbe\xc0\xdd\x28\x72\xf3\x58\x8a\x8c\x5a\xe0\xad\xd5\xda\xe4\xbe\x28\x4c\xbc\x7c\x48\xc9\xbd\xc4\x63\xad\xb8\x7d\x33\x28\x40\xd5\xcf\xa0\xd0\xcd\x1e\xc6\x20\x59\xb8\xd2\xa6\x17\x36\x36\xed\xea\x26\xc4\xb9\x92\xd6\xf8\x7e\x68\xd1\x74\x8e\x62\x7b\xce\xdf\xba\xf8\xdb\x6d\x1c\x47\x92\xf6\x27\x5f\x45\x8b\x7b\x40\x4e\xf6\xde\xd5\x26\x4e\x79\xff\x81\x38\x6e\xb7\xb7\xdd\xa8\x7e\xb9\xd2\x3c\x16\xca\x97\x9b\xbc\x69\x91\x5c\xe4\x4e\x16\xdf\x19\x7f\x44\x8c\x5f\x27\xcc\xe1\x57\xf5\x8f\xdb\xfa\x96\x6f\xcd\xc6\xba\x53\x96\xad\x42\x58\x25\x86\xa6\xef\x50\x37\x4b\x7a\xd8\xc5\x3b\x64\x31\x1d\x9e\x57\xa4\xe8\x30\x7f\x4b\x72\xb7\xa4\xb6\x4d\xcd\x3a\x91\x03\x5b\xc5\x5c\x99\xd9\xf0\x66\x35\xd9\xc4\x70\x8e\xf1\xad\xb2\xf1\xad\xd2\x62\xe6\x1b\x9d\x9f\x12\xcd\x50\xd9\x4d\xd3\xac\x86\x7b\xe7\xc9\x31\x9f\x22\xdf\x7a\x63\xf5\x17\x82\x13\x28\xf9\x54\x4c\x8e\xfd\x13\xf8\xc2\x39\x62\xd9\x87\xef\x2e\x23\x8b\xb6\x08\x01\x0c\x9f\x00\x97\x91\xd0\x6d\xc1\x43\xe5\xb6\x77\x25\xe9\x39\xc6\x3d\xa2\x6c\x7a\x4e\xb5\x6b\x76\x14\xb3\x5a\x6f\x54\x91\x11\xcc\xbb\xf2\x5f\xb0\xee\xf6\xaf\x05\x33\x93\x9b\x8d\x89\x37\x56\x30\x45\xde\x84\x9f\xb1\xf2\xeb\x69\x7f\x66\x28\x49\x3c\x0e\x65\x77\x5b\x5a\x7a\xcf\x50\x8f\xc8\xcf\x57\xd5\x80\x86\x2f\xae\x6d\x50\x5f\x84\x20\x9e\x67\xca\xa6\x38\x00\xd0\xfb\x59\x3f\x86\x04\xfa\xf3\x58\x54\xfd\x5f\xd5\x9b\xba\x6f\x14\x8a\x97\xb8\xea\x36\xcf\x16\x97\x0d\x21\x07\xa0\xc8\x61\xe9\xdd\xc4\x11\x7a\xfc\x00\xee\x0f\xda\x03\xf7\xd4\xb2\x77\x03\xe4\xb8\xca\xfd\x33\x3e\xbf\xe6\x6a\x4d\xf8\xbe\x18\xec\x13\xe8\xe6\x80\xe3\x71\x08\x7e\x1c\xaa\x5b\x5d\x2d\xac\x7e\xeb\x07\x69\x4f\x07\xa2\xf4\x1b\x56\xfa\xdf\x8b\x39\x1e\x5b\x19\xb6\x19\x1d\xbc\x3b\x00\x14\xfd\x67\xeb\xa3\x83\xa3\xe7\x9e\x69\x5f\x88\xfc\x8d\x6c\x92\xc5\x80\x88\xec\xab\x39\x1d\x00\x92\xf5\x3b\xb1\x1d\x30\xe8\xdc\xc9\xf9\xea\x66\x05\x5e\x10\xc1\xfd\xb5\xad\x84\xd8\x69\x78\xa6\xf8\xa7\x94\x28\x9d\xe1\x78\x35\xc7\xb8\x9c\xe4\x67\x60\x94\x82\xad\x87\x0d\xe3\xbf\x55\x66\x96\xd7\xf6\xda\xbe\xc9\x10\x7e\xbf\x7a\xfd\x27\x30\x3a\x46\x8f\x56\xca\x8d\x23\x24\xc4\x70\x57\x8a\xdf\x81\xf1\x80\xe1\xa9\x12\xac\xfc\x85\xbb\xfb\xe5\xdd\xb8\xf1\xfa\xe3\x07\xdf\x73\x48\xd1\x22\x1b\x5d\xeb\xe4\xe8\xbd\x4a\x11\x24\x53\x02\x0b\x2a\x40\x2b\x0b\x8c\x4f\x0b\x8f\x20\x04\x6a\x4e\x26\x86\xea\xac\x68\x53\x88\x8b\xea\x5b\x2c\xc6\xd7\x76\x4d\xdf\x83\xb1\x41\x9d\xe1\xfc\xf2\x95\x1f\xc3\x39\xc8\xc2\x19\xad\x66\x80\xff\xa9\xdc\xcd\x30\x78\x29\x04\xc1\xac\x11\x50\x1e\x24\x43\xe0\x8a\x7a\xd7\x96\xb8\xfe\x5f\xdd\x8e\x06\x65\x04\x4a\x40\xd9\x60\x0f\x72\x94\x8c\xe2\x31\xbc\x20\x06\x63\xbd\x28\xab\xf1\xac\xca\x6c\x79\x75\x35\x5a\x8e\xfe\x0f\x00\x00\xff\xff\x9b\x81\x68\x27\xf9\x1e\x00\x00")

func accountSwaggerJSONBytes() ([]byte, error) {
	return bindataRead(
		_accountSwaggerJSON,
		"account.swagger.json",
	)
}

func accountSwaggerJSON() (*asset, error) {
	bytes, err := accountSwaggerJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "account.swagger.json", size: 7929, mode: os.FileMode(420), modTime: time.Unix(1481926060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"account.swagger.json": accountSwaggerJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"account.swagger.json": {accountSwaggerJSON, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
