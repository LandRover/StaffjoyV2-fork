// Code generated by go-bindata.
// sources:
// account.swagger.json
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _accountSwaggerJSON = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x10\xdc\x3d\x66\xe3\x6c\xf6\x96\x5b\xb0\x87\xa2\x40\x0f\x45\x8b\x9e\x8a\xc0\xa0\xa9\x91\xcd\x40\x22\x99\xe1\xd0\x41\x10\xe8\xbf\x17\xd4\x47\x24\x31\xb4\x63\x3b\xb5\x9b\x00\xc9\x25\xb4\xe6\x43\xf3\x66\x9e\x1f\x3d\x8f\x19\x63\xdc\xdd\x8b\xe5\x12\x90\x5f\x31\x7e\x79\x7e\xc1\xcf\xc2\x33\xa5\x0b\xc3\xaf\x58\xb0\x33\xc6\x49\x51\x09\xc1\x2e\xa4\x34\x5e\xd3\xb9\x45\x43\xa6\xf1\x64\x8c\xaf\x01\x9d\x32\x3a\xd8\xbb\x23\xd3\x86\x98\x03\xe2\x19\x63\x75\x93\xcf\xc9\x15\x54\xe0\xf8\x15\xfb\xd9\x06\xad\x88\x6c\x9f\x20\x9c\x5d\xf0\xbd\x69\x7c\xa5\xd1\xce\x4f\x9c\x85\xb5\xa5\x92\x82\x94\xd1\xb3\x5b\x67\xf4\xe0\x6b\xd1\xe4\x5e\xee\xe8\x2b\x68\xe5\x06\x50\xb3\xf5\xbf\xb3\x0e\xcf\xf0\x94\x31\xbe\x04\x1a\x7d\x64\x8c\x1b\x0b\xd8\xe4\xfb\x9c\x07\x8c\x5f\x94\xa3\xae\xf2\xc6\x8c\xe0\xac\xd1\x0e\xdc\x24\x8a\x31\x7e\x79\x71\x11\x3d\x62\x8c\xe7\xe0\x24\x2a\x4b\x5d\xc3\xae\x99\xf3\x52\x82\x73\x85\x2f\x59\x9f\xe9\x7c\x94\xbe\x09\x6a\xba\x27\x9e\x25\x63\x8c\xff\x8d\x50\x84\x3c\x7f\xcd\x72\x28\x94\x56\x21\xaf\xeb\x61\x5d\xb7\xff\x9a\x82\x27\x81\x75\x96\x3a\xd7\x23\x50\x56\xa0\xa8\x80\x00\x87\xce\xb6\x7f\x11\x1c\x2d\xaa\x86\x18\xa6\x28\xc2\xbc\xa3\xba\x55\x83\xf1\xce\x03\x3e\xc4\x26\x84\x3b\xaf\x10\x42\x47\x0b\x51\x3a\x88\xcc\xf4\x60\x9b\xbc\x4a\x13\x04\x6e\x46\xe6\xc2\x60\x25\xa8\x73\xf8\xef\x72\x8c\xae\x3e\x7b\xb9\xda\x52\x55\xea\x6d\x14\xfb\x74\xbe\x19\x35\x9f\xc4\x32\x6e\x3b\xef\x66\xf9\x1d\x70\xad\x24\x0c\x39\x6e\xb2\x08\x36\xb7\xc6\x6d\x27\xf0\xff\x08\x82\xe0\x5d\x51\xf8\xd8\xf4\x5d\x98\xfc\xd9\xd0\x5b\x3e\xa4\x2c\x23\x3a\x10\xfa\x98\x0d\x07\x22\x6d\xa7\xd2\xe1\xfd\x06\x77\x1e\x76\xfb\xd6\xbe\x9a\x38\xd9\xa8\x79\x13\x51\x9c\x3d\x7a\xaf\xf2\x7a\x1f\x6d\xfc\x04\xef\x4b\x1a\x8f\xcd\xab\xd0\xc0\x34\xaf\xc2\x65\xb4\x1f\xaf\x7a\x95\x71\x84\x4a\x2f\x8f\xae\x22\x7e\xfb\xa4\x7f\xd8\xfc\x43\x44\x5a\xbf\x13\x0f\x7b\x87\xfb\xed\x0d\xc8\xd9\x1e\x3d\x3f\xba\x82\xcd\xac\x70\xee\xde\x60\x3e\x96\xb2\xdd\x08\xfe\xb5\x8f\x7c\x2b\x44\xb7\x18\xea\x24\xd5\xbe\xbd\xfe\xa0\xf4\xe9\x28\x3d\x65\xc4\xe9\xaf\xe8\xa7\x65\x6a\x54\xdb\xb0\xce\x44\xdf\xbb\x11\xd3\xfb\xc6\x9b\xc5\x2d\xc8\xe1\x7e\x8e\xa8\x34\x94\xd8\x0c\x3d\xa2\xf6\xa6\xe1\x8d\xc9\xd5\x8d\x6a\xef\x38\xa8\x84\x2a\x0f\x09\x94\x46\x17\x0a\x2b\xc8\xe7\x42\xe7\x73\x21\x49\xad\x37\x16\xb0\x30\xa6\x04\xa1\x27\x44\x19\xfd\x32\xef\xcd\xc9\xf7\x54\x50\x2d\x00\xe7\x4e\x69\xf9\x12\xc0\x0d\xe9\x03\x71\xfe\x21\x55\x41\xfa\x05\xce\x5b\x6b\x90\x8e\x51\xbb\x5d\x19\x0d\xda\x07\x00\x87\xb4\xd8\xae\x0c\x99\xb9\xc7\xdd\xe7\x93\x14\xe5\xc4\x42\xfa\x0a\x82\x26\xb6\xf6\x49\x1e\x81\x28\xa6\x92\xc0\x15\x41\x15\xfb\x1f\x70\x85\xa5\x55\xb5\x5d\x27\x37\x14\x93\x5a\x0a\x37\xaf\x84\xe3\xb4\xdd\x4e\xfd\x7b\xf2\x6e\x1b\x4b\x72\xf5\x78\xc5\x7c\x4e\x2e\x04\x87\x90\x7c\x5b\x43\xd2\x4a\xff\x07\x24\x35\xf1\xc3\x65\x1f\x54\xe1\xc6\xc8\xea\xec\x57\x00\x00\x00\xff\xff\x33\xf0\xe3\x7e\xe6\x13\x00\x00")

func accountSwaggerJSONBytes() ([]byte, error) {
	return bindataRead(
		_accountSwaggerJSON,
		"account.swagger.json",
	)
}

func accountSwaggerJSON() (*asset, error) {
	bytes, err := accountSwaggerJSONBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "account.swagger.json", size: 5094, mode: os.FileMode(511), modTime: time.Unix(1562394262, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"account.swagger.json": accountSwaggerJSON,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"account.swagger.json": {accountSwaggerJSON, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
